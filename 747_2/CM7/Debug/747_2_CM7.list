
747_2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003620  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080038b8  080038b8  000048b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038d8  080038d8  00005020  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080038d8  080038d8  00005020  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080038d8  080038d8  00005020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038d8  080038d8  000048d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038dc  080038dc  000048dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  24000000  080038e0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  24000020  08003900  00005020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000040  08003900  00005040  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00005020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a57e  00000000  00000000  0000504e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a40  00000000  00000000  0000f5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  00011010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000698  00000000  00000000  000118f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003dd75  00000000  00000000  00011f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aebb  00000000  00000000  0004fd05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018eca7  00000000  00000000  0005abc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e9867  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000228c  00000000  00000000  001e98ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001ebb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000020 	.word	0x24000020
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080038a0 	.word	0x080038a0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000024 	.word	0x24000024
 80002d4:	080038a0 	.word	0x080038a0

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b49      	ldr	r3, [pc, #292]	@ (8000404 <SystemInit+0x12c>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a48      	ldr	r2, [pc, #288]	@ (8000404 <SystemInit+0x12c>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b45      	ldr	r3, [pc, #276]	@ (8000404 <SystemInit+0x12c>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a44      	ldr	r2, [pc, #272]	@ (8000404 <SystemInit+0x12c>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b43      	ldr	r3, [pc, #268]	@ (8000408 <SystemInit+0x130>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b40      	ldr	r3, [pc, #256]	@ (8000408 <SystemInit+0x130>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a3e      	ldr	r2, [pc, #248]	@ (8000408 <SystemInit+0x130>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b3d      	ldr	r3, [pc, #244]	@ (800040c <SystemInit+0x134>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a3c      	ldr	r2, [pc, #240]	@ (800040c <SystemInit+0x134>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b3a      	ldr	r3, [pc, #232]	@ (800040c <SystemInit+0x134>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b39      	ldr	r3, [pc, #228]	@ (800040c <SystemInit+0x134>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	4938      	ldr	r1, [pc, #224]	@ (800040c <SystemInit+0x134>)
 800032c:	4b38      	ldr	r3, [pc, #224]	@ (8000410 <SystemInit+0x138>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b35      	ldr	r3, [pc, #212]	@ (8000408 <SystemInit+0x130>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b32      	ldr	r3, [pc, #200]	@ (8000408 <SystemInit+0x130>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a30      	ldr	r2, [pc, #192]	@ (8000408 <SystemInit+0x130>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b2f      	ldr	r3, [pc, #188]	@ (800040c <SystemInit+0x134>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b2d      	ldr	r3, [pc, #180]	@ (800040c <SystemInit+0x134>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b2c      	ldr	r3, [pc, #176]	@ (800040c <SystemInit+0x134>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b2a      	ldr	r3, [pc, #168]	@ (800040c <SystemInit+0x134>)
 8000362:	4a2c      	ldr	r2, [pc, #176]	@ (8000414 <SystemInit+0x13c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b29      	ldr	r3, [pc, #164]	@ (800040c <SystemInit+0x134>)
 8000368:	4a2b      	ldr	r2, [pc, #172]	@ (8000418 <SystemInit+0x140>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b27      	ldr	r3, [pc, #156]	@ (800040c <SystemInit+0x134>)
 800036e:	4a2b      	ldr	r2, [pc, #172]	@ (800041c <SystemInit+0x144>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b26      	ldr	r3, [pc, #152]	@ (800040c <SystemInit+0x134>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b24      	ldr	r3, [pc, #144]	@ (800040c <SystemInit+0x134>)
 800037a:	4a28      	ldr	r2, [pc, #160]	@ (800041c <SystemInit+0x144>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b23      	ldr	r3, [pc, #140]	@ (800040c <SystemInit+0x134>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b21      	ldr	r3, [pc, #132]	@ (800040c <SystemInit+0x134>)
 8000386:	4a25      	ldr	r2, [pc, #148]	@ (800041c <SystemInit+0x144>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b20      	ldr	r3, [pc, #128]	@ (800040c <SystemInit+0x134>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b1e      	ldr	r3, [pc, #120]	@ (800040c <SystemInit+0x134>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a1d      	ldr	r2, [pc, #116]	@ (800040c <SystemInit+0x134>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b1b      	ldr	r3, [pc, #108]	@ (800040c <SystemInit+0x134>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000420 <SystemInit+0x148>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000420 <SystemInit+0x148>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000424 <SystemInit+0x14c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000428 <SystemInit+0x150>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <SystemInit+0x154>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80003c2:	4b12      	ldr	r3, [pc, #72]	@ (800040c <SystemInit+0x134>)
 80003c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d113      	bne.n	80003f8 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003d0:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <SystemInit+0x134>)
 80003d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003d6:	4a0d      	ldr	r2, [pc, #52]	@ (800040c <SystemInit+0x134>)
 80003d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003e0:	4b13      	ldr	r3, [pc, #76]	@ (8000430 <SystemInit+0x158>)
 80003e2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003e6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003e8:	4b08      	ldr	r3, [pc, #32]	@ (800040c <SystemInit+0x134>)
 80003ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003ee:	4a07      	ldr	r2, [pc, #28]	@ (800040c <SystemInit+0x134>)
 80003f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000ed00 	.word	0xe000ed00
 8000408:	52002000 	.word	0x52002000
 800040c:	58024400 	.word	0x58024400
 8000410:	eaf6ed7f 	.word	0xeaf6ed7f
 8000414:	02020200 	.word	0x02020200
 8000418:	01ff0000 	.word	0x01ff0000
 800041c:	01010280 	.word	0x01010280
 8000420:	580000c0 	.word	0x580000c0
 8000424:	5c001000 	.word	0x5c001000
 8000428:	ffff0000 	.word	0xffff0000
 800042c:	51008108 	.word	0x51008108
 8000430:	52004000 	.word	0x52004000

08000434 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000438:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <ExitRun0Mode+0x2c>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	4a08      	ldr	r2, [pc, #32]	@ (8000460 <ExitRun0Mode+0x2c>)
 800043e:	f023 0302 	bic.w	r3, r3, #2
 8000442:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000444:	bf00      	nop
 8000446:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <ExitRun0Mode+0x2c>)
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0f9      	beq.n	8000446 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000452:	bf00      	nop
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	58024800 	.word	0x58024800

08000464 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800046a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800046e:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000470:	bf00      	nop
 8000472:	4b27      	ldr	r3, [pc, #156]	@ (8000510 <main+0xac>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800047a:	2b00      	cmp	r3, #0
 800047c:	d004      	beq.n	8000488 <main+0x24>
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	1e5a      	subs	r2, r3, #1
 8000482:	607a      	str	r2, [r7, #4]
 8000484:	2b00      	cmp	r3, #0
 8000486:	dcf4      	bgt.n	8000472 <main+0xe>
		;
	if (timeout < 0) {
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2b00      	cmp	r3, #0
 800048c:	da01      	bge.n	8000492 <main+0x2e>
		Error_Handler();
 800048e:	f000 f949 	bl	8000724 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000492:	f000 fa25 	bl	80008e0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000496:	f000 f83d 	bl	8000514 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 800049a:	f000 f8c1 	bl	8000620 <PeriphCommonClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 800049e:	4b1c      	ldr	r3, [pc, #112]	@ (8000510 <main+0xac>)
 80004a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004a4:	4a1a      	ldr	r2, [pc, #104]	@ (8000510 <main+0xac>)
 80004a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004ae:	4b18      	ldr	r3, [pc, #96]	@ (8000510 <main+0xac>)
 80004b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004b8:	603b      	str	r3, [r7, #0]
 80004ba:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80004bc:	2000      	movs	r0, #0
 80004be:	f000 fd99 	bl	8000ff4 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 80004c2:	2100      	movs	r1, #0
 80004c4:	2000      	movs	r0, #0
 80004c6:	f000 fdaf 	bl	8001028 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 80004ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004ce:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 80004d0:	bf00      	nop
 80004d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000510 <main+0xac>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d104      	bne.n	80004e8 <main+0x84>
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	1e5a      	subs	r2, r3, #1
 80004e2:	607a      	str	r2, [r7, #4]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	dcf4      	bgt.n	80004d2 <main+0x6e>
		;
	if (timeout < 0) {
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	da01      	bge.n	80004f2 <main+0x8e>
		Error_Handler();
 80004ee:	f000 f919 	bl	8000724 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004f2:	f000 f8c5 	bl	8000680 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	BSP_LED_Init(LED_BLUE);
 80004f6:	2003      	movs	r0, #3
 80004f8:	f000 f990 	bl	800081c <BSP_LED_Init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		BSP_LED_Toggle(LED_BLUE);
 80004fc:	2003      	movs	r0, #3
 80004fe:	f000 f9d1 	bl	80008a4 <BSP_LED_Toggle>
		HAL_Delay(500);
 8000502:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000506:	f000 fa7d 	bl	8000a04 <HAL_Delay>
		BSP_LED_Toggle(LED_BLUE);
 800050a:	bf00      	nop
 800050c:	e7f6      	b.n	80004fc <main+0x98>
 800050e:	bf00      	nop
 8000510:	58024400 	.word	0x58024400

08000514 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b09c      	sub	sp, #112	@ 0x70
 8000518:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800051a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800051e:	224c      	movs	r2, #76	@ 0x4c
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f003 f990 	bl	8003848 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2220      	movs	r2, #32
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f003 f98a 	bl	8003848 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000534:	2004      	movs	r0, #4
 8000536:	f000 fd8b 	bl	8001050 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053a:	2300      	movs	r3, #0
 800053c:	603b      	str	r3, [r7, #0]
 800053e:	4b36      	ldr	r3, [pc, #216]	@ (8000618 <SystemClock_Config+0x104>)
 8000540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000542:	4a35      	ldr	r2, [pc, #212]	@ (8000618 <SystemClock_Config+0x104>)
 8000544:	f023 0301 	bic.w	r3, r3, #1
 8000548:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800054a:	4b33      	ldr	r3, [pc, #204]	@ (8000618 <SystemClock_Config+0x104>)
 800054c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	4b31      	ldr	r3, [pc, #196]	@ (800061c <SystemClock_Config+0x108>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a30      	ldr	r2, [pc, #192]	@ (800061c <SystemClock_Config+0x108>)
 800055a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b2e      	ldr	r3, [pc, #184]	@ (800061c <SystemClock_Config+0x108>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000568:	603b      	str	r3, [r7, #0]
 800056a:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 800056c:	bf00      	nop
 800056e:	4b2b      	ldr	r3, [pc, #172]	@ (800061c <SystemClock_Config+0x108>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000576:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800057a:	d1f8      	bne.n	800056e <SystemClock_Config+0x5a>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800057c:	230b      	movs	r3, #11
 800057e:	627b      	str	r3, [r7, #36]	@ 0x24
			| RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000580:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000584:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000586:	2301      	movs	r3, #1
 8000588:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058a:	2340      	movs	r3, #64	@ 0x40
 800058c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800058e:	2301      	movs	r3, #1
 8000590:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000596:	2302      	movs	r3, #2
 8000598:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 5;
 800059a:	2305      	movs	r3, #5
 800059c:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 48;
 800059e:	2330      	movs	r3, #48	@ 0x30
 80005a0:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 5;
 80005a6:	2305      	movs	r3, #5
 80005a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80005ae:	2308      	movs	r3, #8
 80005b0:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005b2:	2300      	movs	r3, #0
 80005b4:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 fda0 	bl	8001104 <HAL_RCC_OscConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xba>
		Error_Handler();
 80005ca:	f000 f8ab 	bl	8000724 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005ce:	233f      	movs	r3, #63	@ 0x3f
 80005d0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 80005e6:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80005ea:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 f9df 	bl	80019b8 <HAL_RCC_ClockConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0xf0>
		Error_Handler();
 8000600:	f000 f890 	bl	8000724 <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000604:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000608:	2100      	movs	r1, #0
 800060a:	2000      	movs	r0, #0
 800060c:	f001 fb8a 	bl	8001d24 <HAL_RCC_MCOConfig>
}
 8000610:	bf00      	nop
 8000612:	3770      	adds	r7, #112	@ 0x70
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	58000400 	.word	0x58000400
 800061c:	58024800 	.word	0x58024800

08000620 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b0b2      	sub	sp, #200	@ 0xc8
 8000624:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000626:	463b      	mov	r3, r7
 8000628:	22c8      	movs	r2, #200	@ 0xc8
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f003 f90b 	bl	8003848 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000632:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000636:	f04f 0300 	mov.w	r3, #0
 800063a:	e9c7 2300 	strd	r2, r3, [r7]
	PeriphClkInitStruct.PLL2.PLL2M = 2;
 800063e:	2302      	movs	r3, #2
 8000640:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000642:	230c      	movs	r3, #12
 8000644:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000646:	2302      	movs	r3, #2
 8000648:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800064a:	2302      	movs	r3, #2
 800064c:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 800064e:	2302      	movs	r3, #2
 8000650:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000652:	23c0      	movs	r3, #192	@ 0xc0
 8000654:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000656:	2320      	movs	r3, #32
 8000658:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800065e:	2300      	movs	r3, #0
 8000660:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000664:	463b      	mov	r3, r7
 8000666:	4618      	mov	r0, r3
 8000668:	f001 fd40 	bl	80020ec <HAL_RCCEx_PeriphCLKConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <PeriphCommonClock_Config+0x56>
		Error_Handler();
 8000672:	f000 f857 	bl	8000724 <Error_Handler>
	}
}
 8000676:	bf00      	nop
 8000678:	37c8      	adds	r7, #200	@ 0xc8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	4b21      	ldr	r3, [pc, #132]	@ (800071c <MX_GPIO_Init+0x9c>)
 8000698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800069c:	4a1f      	ldr	r2, [pc, #124]	@ (800071c <MX_GPIO_Init+0x9c>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006a6:	4b1d      	ldr	r3, [pc, #116]	@ (800071c <MX_GPIO_Init+0x9c>)
 80006a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ac:	f003 0304 	and.w	r3, r3, #4
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006b4:	4b19      	ldr	r3, [pc, #100]	@ (800071c <MX_GPIO_Init+0x9c>)
 80006b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ba:	4a18      	ldr	r2, [pc, #96]	@ (800071c <MX_GPIO_Init+0x9c>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006c4:	4b15      	ldr	r3, [pc, #84]	@ (800071c <MX_GPIO_Init+0x9c>)
 80006c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006d2:	4b12      	ldr	r3, [pc, #72]	@ (800071c <MX_GPIO_Init+0x9c>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d8:	4a10      	ldr	r2, [pc, #64]	@ (800071c <MX_GPIO_Init+0x9c>)
 80006da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006e2:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_GPIO_Init+0x9c>)
 80006e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : CEC_CK_MCO1_Pin */
	GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 80006f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006f4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f6:	2302      	movs	r3, #2
 80006f8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2300      	movs	r3, #0
 8000700:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	4619      	mov	r1, r3
 800070c:	4804      	ldr	r0, [pc, #16]	@ (8000720 <MX_GPIO_Init+0xa0>)
 800070e:	f000 fa8d 	bl	8000c2c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000712:	bf00      	nop
 8000714:	3720      	adds	r7, #32
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	58024400 	.word	0x58024400
 8000720:	58020000 	.word	0x58020000

08000724 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <Error_Handler+0x8>

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000736:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <HAL_MspInit+0x30>)
 8000738:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800073c:	4a08      	ldr	r2, [pc, #32]	@ (8000760 <HAL_MspInit+0x30>)
 800073e:	f043 0302 	orr.w	r3, r3, #2
 8000742:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000746:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <HAL_MspInit+0x30>)
 8000748:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800074c:	f003 0302 	and.w	r3, r3, #2
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	58024400 	.word	0x58024400

08000764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <NMI_Handler+0x4>

0800076c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <HardFault_Handler+0x4>

08000774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <MemManage_Handler+0x4>

0800077c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <BusFault_Handler+0x4>

08000784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <UsageFault_Handler+0x4>

0800078c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ba:	f000 f903 	bl	80009c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80007c4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000800 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80007c8:	f7ff fe34 	bl	8000434 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007cc:	f7ff fd84 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d0:	480c      	ldr	r0, [pc, #48]	@ (8000804 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007d2:	490d      	ldr	r1, [pc, #52]	@ (8000808 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007d4:	4a0d      	ldr	r2, [pc, #52]	@ (800080c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d8:	e002      	b.n	80007e0 <LoopCopyDataInit>

080007da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007de:	3304      	adds	r3, #4

080007e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e4:	d3f9      	bcc.n	80007da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000810 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000814 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ec:	e001      	b.n	80007f2 <LoopFillZerobss>

080007ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f0:	3204      	adds	r2, #4

080007f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f4:	d3fb      	bcc.n	80007ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007f6:	f003 f82f 	bl	8003858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007fa:	f7ff fe33 	bl	8000464 <main>
  bx  lr
 80007fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000800:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000804:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000808:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 800080c:	080038e0 	.word	0x080038e0
  ldr r2, =_sbss
 8000810:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 8000814:	24000040 	.word	0x24000040

08000818 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000818:	e7fe      	b.n	8000818 <ADC3_IRQHandler>
	...

0800081c <BSP_LED_Init>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	@ 0x28
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE();
 800082a:	4b1b      	ldr	r3, [pc, #108]	@ (8000898 <BSP_LED_Init+0x7c>)
 800082c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000830:	4a19      	ldr	r2, [pc, #100]	@ (8000898 <BSP_LED_Init+0x7c>)
 8000832:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000836:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800083a:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <BSP_LED_Init+0x7c>)
 800083c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	4a14      	ldr	r2, [pc, #80]	@ (800089c <BSP_LED_Init+0x80>)
 800084c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000850:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000856:	2301      	movs	r3, #1
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085a:	2303      	movs	r3, #3
 800085c:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	4a0f      	ldr	r2, [pc, #60]	@ (80008a0 <BSP_LED_Init+0x84>)
 8000862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000866:	f107 0210 	add.w	r2, r7, #16
 800086a:	4611      	mov	r1, r2
 800086c:	4618      	mov	r0, r3
 800086e:	f000 f9dd 	bl	8000c2c <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	4a0a      	ldr	r2, [pc, #40]	@ (80008a0 <BSP_LED_Init+0x84>)
 8000876:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	4a07      	ldr	r2, [pc, #28]	@ (800089c <BSP_LED_Init+0x80>)
 800087e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000882:	b29b      	uxth	r3, r3
 8000884:	2201      	movs	r2, #1
 8000886:	4619      	mov	r1, r3
 8000888:	f000 fb80 	bl	8000f8c <HAL_GPIO_WritePin>
 return ret;
 800088c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800088e:	4618      	mov	r0, r3
 8000890:	3728      	adds	r7, #40	@ 0x28
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	58024400 	.word	0x58024400
 800089c:	080038c8 	.word	0x080038c8
 80008a0:	24000008 	.word	0x24000008

080008a4 <BSP_LED_Toggle>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Toggle(Led_TypeDef Led)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	4a08      	ldr	r2, [pc, #32]	@ (80008d8 <BSP_LED_Toggle+0x34>)
 80008b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	4907      	ldr	r1, [pc, #28]	@ (80008dc <BSP_LED_Toggle+0x38>)
 80008be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	4619      	mov	r1, r3
 80008c6:	4610      	mov	r0, r2
 80008c8:	f000 fb79 	bl	8000fbe <HAL_GPIO_TogglePin>
  return ret;
 80008cc:	68fb      	ldr	r3, [r7, #12]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	24000008 	.word	0x24000008
 80008dc:	080038c8 	.word	0x080038c8

080008e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e6:	2003      	movs	r0, #3
 80008e8:	f000 f96e 	bl	8000bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008ec:	f001 fa84 	bl	8001df8 <HAL_RCC_GetSysClockFreq>
 80008f0:	4602      	mov	r2, r0
 80008f2:	4b15      	ldr	r3, [pc, #84]	@ (8000948 <HAL_Init+0x68>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	0a1b      	lsrs	r3, r3, #8
 80008f8:	f003 030f 	and.w	r3, r3, #15
 80008fc:	4913      	ldr	r1, [pc, #76]	@ (800094c <HAL_Init+0x6c>)
 80008fe:	5ccb      	ldrb	r3, [r1, r3]
 8000900:	f003 031f 	and.w	r3, r3, #31
 8000904:	fa22 f303 	lsr.w	r3, r2, r3
 8000908:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800090a:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <HAL_Init+0x68>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	f003 030f 	and.w	r3, r3, #15
 8000912:	4a0e      	ldr	r2, [pc, #56]	@ (800094c <HAL_Init+0x6c>)
 8000914:	5cd3      	ldrb	r3, [r2, r3]
 8000916:	f003 031f 	and.w	r3, r3, #31
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	fa22 f303 	lsr.w	r3, r2, r3
 8000920:	4a0b      	ldr	r2, [pc, #44]	@ (8000950 <HAL_Init+0x70>)
 8000922:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000924:	4a0b      	ldr	r2, [pc, #44]	@ (8000954 <HAL_Init+0x74>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800092a:	2000      	movs	r0, #0
 800092c:	f000 f814 	bl	8000958 <HAL_InitTick>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	e002      	b.n	8000940 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800093a:	f7ff fef9 	bl	8000730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800093e:	2300      	movs	r3, #0
}
 8000940:	4618      	mov	r0, r3
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	58024400 	.word	0x58024400
 800094c:	080038b8 	.word	0x080038b8
 8000950:	24000004 	.word	0x24000004
 8000954:	24000000 	.word	0x24000000

08000958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000960:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <HAL_InitTick+0x60>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d101      	bne.n	800096c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000968:	2301      	movs	r3, #1
 800096a:	e021      	b.n	80009b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800096c:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <HAL_InitTick+0x64>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <HAL_InitTick+0x60>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4619      	mov	r1, r3
 8000976:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800097a:	fbb3 f3f1 	udiv	r3, r3, r1
 800097e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000982:	4618      	mov	r0, r3
 8000984:	f000 f945 	bl	8000c12 <HAL_SYSTICK_Config>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	e00e      	b.n	80009b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b0f      	cmp	r3, #15
 8000996:	d80a      	bhi.n	80009ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000998:	2200      	movs	r2, #0
 800099a:	6879      	ldr	r1, [r7, #4]
 800099c:	f04f 30ff 	mov.w	r0, #4294967295
 80009a0:	f000 f91d 	bl	8000bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a4:	4a06      	ldr	r2, [pc, #24]	@ (80009c0 <HAL_InitTick+0x68>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009aa:	2300      	movs	r3, #0
 80009ac:	e000      	b.n	80009b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	2400001c 	.word	0x2400001c
 80009bc:	24000000 	.word	0x24000000
 80009c0:	24000018 	.word	0x24000018

080009c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <HAL_IncTick+0x20>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <HAL_IncTick+0x24>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4413      	add	r3, r2
 80009d4:	4a04      	ldr	r2, [pc, #16]	@ (80009e8 <HAL_IncTick+0x24>)
 80009d6:	6013      	str	r3, [r2, #0]
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	2400001c 	.word	0x2400001c
 80009e8:	2400003c 	.word	0x2400003c

080009ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return uwTick;
 80009f0:	4b03      	ldr	r3, [pc, #12]	@ (8000a00 <HAL_GetTick+0x14>)
 80009f2:	681b      	ldr	r3, [r3, #0]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	2400003c 	.word	0x2400003c

08000a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a0c:	f7ff ffee 	bl	80009ec <HAL_GetTick>
 8000a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a1c:	d005      	beq.n	8000a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a48 <HAL_Delay+0x44>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	461a      	mov	r2, r3
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4413      	add	r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a2a:	bf00      	nop
 8000a2c:	f7ff ffde 	bl	80009ec <HAL_GetTick>
 8000a30:	4602      	mov	r2, r0
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d8f7      	bhi.n	8000a2c <HAL_Delay+0x28>
  {
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	2400001c 	.word	0x2400001c

08000a4c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a50:	4b03      	ldr	r3, [pc, #12]	@ (8000a60 <HAL_GetREVID+0x14>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	0c1b      	lsrs	r3, r3, #16
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	5c001000 	.word	0x5c001000

08000a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a74:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa4 <__NVIC_SetPriorityGrouping+0x40>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a80:	4013      	ands	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a8c:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a92:	4a04      	ldr	r2, [pc, #16]	@ (8000aa4 <__NVIC_SetPriorityGrouping+0x40>)
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	60d3      	str	r3, [r2, #12]
}
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000ed00 	.word	0xe000ed00
 8000aa8:	05fa0000 	.word	0x05fa0000

08000aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab0:	4b04      	ldr	r3, [pc, #16]	@ (8000ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	0a1b      	lsrs	r3, r3, #8
 8000ab6:	f003 0307 	and.w	r3, r3, #7
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	6039      	str	r1, [r7, #0]
 8000ad2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ad4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	db0a      	blt.n	8000af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	490c      	ldr	r1, [pc, #48]	@ (8000b14 <__NVIC_SetPriority+0x4c>)
 8000ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ae6:	0112      	lsls	r2, r2, #4
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	440b      	add	r3, r1
 8000aec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af0:	e00a      	b.n	8000b08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4908      	ldr	r1, [pc, #32]	@ (8000b18 <__NVIC_SetPriority+0x50>)
 8000af8:	88fb      	ldrh	r3, [r7, #6]
 8000afa:	f003 030f 	and.w	r3, r3, #15
 8000afe:	3b04      	subs	r3, #4
 8000b00:	0112      	lsls	r2, r2, #4
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	440b      	add	r3, r1
 8000b06:	761a      	strb	r2, [r3, #24]
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000e100 	.word	0xe000e100
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b089      	sub	sp, #36	@ 0x24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	f1c3 0307 	rsb	r3, r3, #7
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	bf28      	it	cs
 8000b3a:	2304      	movcs	r3, #4
 8000b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3304      	adds	r3, #4
 8000b42:	2b06      	cmp	r3, #6
 8000b44:	d902      	bls.n	8000b4c <NVIC_EncodePriority+0x30>
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3b03      	subs	r3, #3
 8000b4a:	e000      	b.n	8000b4e <NVIC_EncodePriority+0x32>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	f04f 32ff 	mov.w	r2, #4294967295
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43da      	mvns	r2, r3
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	401a      	ands	r2, r3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b64:	f04f 31ff 	mov.w	r1, #4294967295
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6e:	43d9      	mvns	r1, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	4313      	orrs	r3, r2
         );
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3724      	adds	r7, #36	@ 0x24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b94:	d301      	bcc.n	8000b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b96:	2301      	movs	r3, #1
 8000b98:	e00f      	b.n	8000bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <SysTick_Config+0x40>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ba2:	210f      	movs	r1, #15
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	f7ff ff8e 	bl	8000ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bac:	4b05      	ldr	r3, [pc, #20]	@ (8000bc4 <SysTick_Config+0x40>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb2:	4b04      	ldr	r3, [pc, #16]	@ (8000bc4 <SysTick_Config+0x40>)
 8000bb4:	2207      	movs	r2, #7
 8000bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	e000e010 	.word	0xe000e010

08000bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff ff47 	bl	8000a64 <__NVIC_SetPriorityGrouping>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b086      	sub	sp, #24
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	60b9      	str	r1, [r7, #8]
 8000be8:	607a      	str	r2, [r7, #4]
 8000bea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bec:	f7ff ff5e 	bl	8000aac <__NVIC_GetPriorityGrouping>
 8000bf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	68b9      	ldr	r1, [r7, #8]
 8000bf6:	6978      	ldr	r0, [r7, #20]
 8000bf8:	f7ff ff90 	bl	8000b1c <NVIC_EncodePriority>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff5f 	bl	8000ac8 <__NVIC_SetPriority>
}
 8000c0a:	bf00      	nop
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff ffb2 	bl	8000b84 <SysTick_Config>
 8000c20:	4603      	mov	r3, r0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b089      	sub	sp, #36	@ 0x24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000c3a:	4b89      	ldr	r3, [pc, #548]	@ (8000e60 <HAL_GPIO_Init+0x234>)
 8000c3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c3e:	e194      	b.n	8000f6a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	2101      	movs	r1, #1
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f000 8186 	beq.w	8000f64 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f003 0303 	and.w	r3, r3, #3
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d005      	beq.n	8000c70 <HAL_GPIO_Init+0x44>
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 0303 	and.w	r3, r3, #3
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d130      	bne.n	8000cd2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4013      	ands	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	68da      	ldr	r2, [r3, #12]
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	091b      	lsrs	r3, r3, #4
 8000cbc:	f003 0201 	and.w	r2, r3, #1
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	2b03      	cmp	r3, #3
 8000cdc:	d017      	beq.n	8000d0e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	2203      	movs	r2, #3
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	689a      	ldr	r2, [r3, #8]
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 0303 	and.w	r3, r3, #3
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d123      	bne.n	8000d62 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	08da      	lsrs	r2, r3, #3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3208      	adds	r2, #8
 8000d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	220f      	movs	r2, #15
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43db      	mvns	r3, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	691a      	ldr	r2, [r3, #16]
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	f003 0307 	and.w	r3, r3, #7
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	08da      	lsrs	r2, r3, #3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3208      	adds	r2, #8
 8000d5c:	69b9      	ldr	r1, [r7, #24]
 8000d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4013      	ands	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 0203 	and.w	r2, r3, #3
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f000 80e0 	beq.w	8000f64 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e64 <HAL_GPIO_Init+0x238>)
 8000da6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000daa:	4a2e      	ldr	r2, [pc, #184]	@ (8000e64 <HAL_GPIO_Init+0x238>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000db4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e64 <HAL_GPIO_Init+0x238>)
 8000db6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dc2:	4a29      	ldr	r2, [pc, #164]	@ (8000e68 <HAL_GPIO_Init+0x23c>)
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	089b      	lsrs	r3, r3, #2
 8000dc8:	3302      	adds	r3, #2
 8000dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	220f      	movs	r2, #15
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4013      	ands	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a20      	ldr	r2, [pc, #128]	@ (8000e6c <HAL_GPIO_Init+0x240>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d052      	beq.n	8000e94 <HAL_GPIO_Init+0x268>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a1f      	ldr	r2, [pc, #124]	@ (8000e70 <HAL_GPIO_Init+0x244>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d031      	beq.n	8000e5a <HAL_GPIO_Init+0x22e>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a1e      	ldr	r2, [pc, #120]	@ (8000e74 <HAL_GPIO_Init+0x248>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d02b      	beq.n	8000e56 <HAL_GPIO_Init+0x22a>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a1d      	ldr	r2, [pc, #116]	@ (8000e78 <HAL_GPIO_Init+0x24c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d025      	beq.n	8000e52 <HAL_GPIO_Init+0x226>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a1c      	ldr	r2, [pc, #112]	@ (8000e7c <HAL_GPIO_Init+0x250>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d01f      	beq.n	8000e4e <HAL_GPIO_Init+0x222>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a1b      	ldr	r2, [pc, #108]	@ (8000e80 <HAL_GPIO_Init+0x254>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d019      	beq.n	8000e4a <HAL_GPIO_Init+0x21e>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a1a      	ldr	r2, [pc, #104]	@ (8000e84 <HAL_GPIO_Init+0x258>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d013      	beq.n	8000e46 <HAL_GPIO_Init+0x21a>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a19      	ldr	r2, [pc, #100]	@ (8000e88 <HAL_GPIO_Init+0x25c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d00d      	beq.n	8000e42 <HAL_GPIO_Init+0x216>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a18      	ldr	r2, [pc, #96]	@ (8000e8c <HAL_GPIO_Init+0x260>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d007      	beq.n	8000e3e <HAL_GPIO_Init+0x212>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a17      	ldr	r2, [pc, #92]	@ (8000e90 <HAL_GPIO_Init+0x264>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d101      	bne.n	8000e3a <HAL_GPIO_Init+0x20e>
 8000e36:	2309      	movs	r3, #9
 8000e38:	e02d      	b.n	8000e96 <HAL_GPIO_Init+0x26a>
 8000e3a:	230a      	movs	r3, #10
 8000e3c:	e02b      	b.n	8000e96 <HAL_GPIO_Init+0x26a>
 8000e3e:	2308      	movs	r3, #8
 8000e40:	e029      	b.n	8000e96 <HAL_GPIO_Init+0x26a>
 8000e42:	2307      	movs	r3, #7
 8000e44:	e027      	b.n	8000e96 <HAL_GPIO_Init+0x26a>
 8000e46:	2306      	movs	r3, #6
 8000e48:	e025      	b.n	8000e96 <HAL_GPIO_Init+0x26a>
 8000e4a:	2305      	movs	r3, #5
 8000e4c:	e023      	b.n	8000e96 <HAL_GPIO_Init+0x26a>
 8000e4e:	2304      	movs	r3, #4
 8000e50:	e021      	b.n	8000e96 <HAL_GPIO_Init+0x26a>
 8000e52:	2303      	movs	r3, #3
 8000e54:	e01f      	b.n	8000e96 <HAL_GPIO_Init+0x26a>
 8000e56:	2302      	movs	r3, #2
 8000e58:	e01d      	b.n	8000e96 <HAL_GPIO_Init+0x26a>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e01b      	b.n	8000e96 <HAL_GPIO_Init+0x26a>
 8000e5e:	bf00      	nop
 8000e60:	58000080 	.word	0x58000080
 8000e64:	58024400 	.word	0x58024400
 8000e68:	58000400 	.word	0x58000400
 8000e6c:	58020000 	.word	0x58020000
 8000e70:	58020400 	.word	0x58020400
 8000e74:	58020800 	.word	0x58020800
 8000e78:	58020c00 	.word	0x58020c00
 8000e7c:	58021000 	.word	0x58021000
 8000e80:	58021400 	.word	0x58021400
 8000e84:	58021800 	.word	0x58021800
 8000e88:	58021c00 	.word	0x58021c00
 8000e8c:	58022000 	.word	0x58022000
 8000e90:	58022400 	.word	0x58022400
 8000e94:	2300      	movs	r3, #0
 8000e96:	69fa      	ldr	r2, [r7, #28]
 8000e98:	f002 0203 	and.w	r2, r2, #3
 8000e9c:	0092      	lsls	r2, r2, #2
 8000e9e:	4093      	lsls	r3, r2
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ea6:	4938      	ldr	r1, [pc, #224]	@ (8000f88 <HAL_GPIO_Init+0x35c>)
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	3302      	adds	r3, #2
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000eda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000ee2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	3301      	adds	r3, #1
 8000f68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa22 f303 	lsr.w	r3, r2, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f47f ae63 	bne.w	8000c40 <HAL_GPIO_Init+0x14>
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	bf00      	nop
 8000f7e:	3724      	adds	r7, #36	@ 0x24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	58000400 	.word	0x58000400

08000f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	807b      	strh	r3, [r7, #2]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f9c:	787b      	ldrb	r3, [r7, #1]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fa2:	887a      	ldrh	r2, [r7, #2]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000fa8:	e003      	b.n	8000fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000faa:	887b      	ldrh	r3, [r7, #2]
 8000fac:	041a      	lsls	r2, r3, #16
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	619a      	str	r2, [r3, #24]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b085      	sub	sp, #20
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fd0:	887a      	ldrh	r2, [r7, #2]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	041a      	lsls	r2, r3, #16
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	43d9      	mvns	r1, r3
 8000fdc:	887b      	ldrh	r3, [r7, #2]
 8000fde:	400b      	ands	r3, r1
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	619a      	str	r2, [r3, #24]
}
 8000fe6:	bf00      	nop
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
	...

08000ff4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000ffc:	4a08      	ldr	r2, [pc, #32]	@ (8001020 <HAL_HSEM_FastTake+0x2c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3320      	adds	r3, #32
 8001002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001006:	4a07      	ldr	r2, [pc, #28]	@ (8001024 <HAL_HSEM_FastTake+0x30>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d101      	bne.n	8001010 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	e000      	b.n	8001012 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	58026400 	.word	0x58026400
 8001024:	80000300 	.word	0x80000300

08001028 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001032:	4906      	ldr	r1, [pc, #24]	@ (800104c <HAL_HSEM_Release+0x24>)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	58026400 	.word	0x58026400

08001050 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001058:	4b29      	ldr	r3, [pc, #164]	@ (8001100 <HAL_PWREx_ConfigSupply+0xb0>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	2b06      	cmp	r3, #6
 8001062:	d00a      	beq.n	800107a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001064:	4b26      	ldr	r3, [pc, #152]	@ (8001100 <HAL_PWREx_ConfigSupply+0xb0>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	429a      	cmp	r2, r3
 8001070:	d001      	beq.n	8001076 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e040      	b.n	80010f8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	e03e      	b.n	80010f8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800107a:	4b21      	ldr	r3, [pc, #132]	@ (8001100 <HAL_PWREx_ConfigSupply+0xb0>)
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001082:	491f      	ldr	r1, [pc, #124]	@ (8001100 <HAL_PWREx_ConfigSupply+0xb0>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4313      	orrs	r3, r2
 8001088:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800108a:	f7ff fcaf 	bl	80009ec <HAL_GetTick>
 800108e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001090:	e009      	b.n	80010a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001092:	f7ff fcab 	bl	80009ec <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010a0:	d901      	bls.n	80010a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e028      	b.n	80010f8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80010a6:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <HAL_PWREx_ConfigSupply+0xb0>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010b2:	d1ee      	bne.n	8001092 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b1e      	cmp	r3, #30
 80010b8:	d008      	beq.n	80010cc <HAL_PWREx_ConfigSupply+0x7c>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80010be:	d005      	beq.n	80010cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b1d      	cmp	r3, #29
 80010c4:	d002      	beq.n	80010cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b2d      	cmp	r3, #45	@ 0x2d
 80010ca:	d114      	bne.n	80010f6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80010cc:	f7ff fc8e 	bl	80009ec <HAL_GetTick>
 80010d0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80010d2:	e009      	b.n	80010e8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80010d4:	f7ff fc8a 	bl	80009ec <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010e2:	d901      	bls.n	80010e8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e007      	b.n	80010f8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80010e8:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <HAL_PWREx_ConfigSupply+0xb0>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010f4:	d1ee      	bne.n	80010d4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	58024800 	.word	0x58024800

08001104 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08c      	sub	sp, #48	@ 0x30
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d102      	bne.n	8001118 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	f000 bc48 	b.w	80019a8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	2b00      	cmp	r3, #0
 8001122:	f000 8088 	beq.w	8001236 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001126:	4b99      	ldr	r3, [pc, #612]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800112e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001130:	4b96      	ldr	r3, [pc, #600]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 8001132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001134:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001138:	2b10      	cmp	r3, #16
 800113a:	d007      	beq.n	800114c <HAL_RCC_OscConfig+0x48>
 800113c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800113e:	2b18      	cmp	r3, #24
 8001140:	d111      	bne.n	8001166 <HAL_RCC_OscConfig+0x62>
 8001142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d10c      	bne.n	8001166 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800114c:	4b8f      	ldr	r3, [pc, #572]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d06d      	beq.n	8001234 <HAL_RCC_OscConfig+0x130>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d169      	bne.n	8001234 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	f000 bc21 	b.w	80019a8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800116e:	d106      	bne.n	800117e <HAL_RCC_OscConfig+0x7a>
 8001170:	4b86      	ldr	r3, [pc, #536]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a85      	ldr	r2, [pc, #532]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 8001176:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	e02e      	b.n	80011dc <HAL_RCC_OscConfig+0xd8>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10c      	bne.n	80011a0 <HAL_RCC_OscConfig+0x9c>
 8001186:	4b81      	ldr	r3, [pc, #516]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a80      	ldr	r2, [pc, #512]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 800118c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	4b7e      	ldr	r3, [pc, #504]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a7d      	ldr	r2, [pc, #500]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 8001198:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	e01d      	b.n	80011dc <HAL_RCC_OscConfig+0xd8>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011a8:	d10c      	bne.n	80011c4 <HAL_RCC_OscConfig+0xc0>
 80011aa:	4b78      	ldr	r3, [pc, #480]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a77      	ldr	r2, [pc, #476]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 80011b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	4b75      	ldr	r3, [pc, #468]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a74      	ldr	r2, [pc, #464]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 80011bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e00b      	b.n	80011dc <HAL_RCC_OscConfig+0xd8>
 80011c4:	4b71      	ldr	r3, [pc, #452]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a70      	ldr	r2, [pc, #448]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 80011ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	4b6e      	ldr	r3, [pc, #440]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a6d      	ldr	r2, [pc, #436]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 80011d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d013      	beq.n	800120c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e4:	f7ff fc02 	bl	80009ec <HAL_GetTick>
 80011e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ec:	f7ff fbfe 	bl	80009ec <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b64      	cmp	r3, #100	@ 0x64
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e3d4      	b.n	80019a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011fe:	4b63      	ldr	r3, [pc, #396]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0f0      	beq.n	80011ec <HAL_RCC_OscConfig+0xe8>
 800120a:	e014      	b.n	8001236 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120c:	f7ff fbee 	bl	80009ec <HAL_GetTick>
 8001210:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001214:	f7ff fbea 	bl	80009ec <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b64      	cmp	r3, #100	@ 0x64
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e3c0      	b.n	80019a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001226:	4b59      	ldr	r3, [pc, #356]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f0      	bne.n	8001214 <HAL_RCC_OscConfig+0x110>
 8001232:	e000      	b.n	8001236 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	f000 80ca 	beq.w	80013d8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001244:	4b51      	ldr	r3, [pc, #324]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800124c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800124e:	4b4f      	ldr	r3, [pc, #316]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 8001250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001252:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001254:	6a3b      	ldr	r3, [r7, #32]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d007      	beq.n	800126a <HAL_RCC_OscConfig+0x166>
 800125a:	6a3b      	ldr	r3, [r7, #32]
 800125c:	2b18      	cmp	r3, #24
 800125e:	d156      	bne.n	800130e <HAL_RCC_OscConfig+0x20a>
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d151      	bne.n	800130e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800126a:	4b48      	ldr	r3, [pc, #288]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	2b00      	cmp	r3, #0
 8001274:	d005      	beq.n	8001282 <HAL_RCC_OscConfig+0x17e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e392      	b.n	80019a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001282:	4b42      	ldr	r3, [pc, #264]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f023 0219 	bic.w	r2, r3, #25
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	493f      	ldr	r1, [pc, #252]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 8001290:	4313      	orrs	r3, r2
 8001292:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001294:	f7ff fbaa 	bl	80009ec <HAL_GetTick>
 8001298:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800129c:	f7ff fba6 	bl	80009ec <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e37c      	b.n	80019a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012ae:	4b37      	ldr	r3, [pc, #220]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f0      	beq.n	800129c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ba:	f7ff fbc7 	bl	8000a4c <HAL_GetREVID>
 80012be:	4603      	mov	r3, r0
 80012c0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d817      	bhi.n	80012f8 <HAL_RCC_OscConfig+0x1f4>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	2b40      	cmp	r3, #64	@ 0x40
 80012ce:	d108      	bne.n	80012e2 <HAL_RCC_OscConfig+0x1de>
 80012d0:	4b2e      	ldr	r3, [pc, #184]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80012d8:	4a2c      	ldr	r2, [pc, #176]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 80012da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012de:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012e0:	e07a      	b.n	80013d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e2:	4b2a      	ldr	r3, [pc, #168]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	031b      	lsls	r3, r3, #12
 80012f0:	4926      	ldr	r1, [pc, #152]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012f6:	e06f      	b.n	80013d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f8:	4b24      	ldr	r3, [pc, #144]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	061b      	lsls	r3, r3, #24
 8001306:	4921      	ldr	r1, [pc, #132]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 8001308:	4313      	orrs	r3, r2
 800130a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800130c:	e064      	b.n	80013d8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d047      	beq.n	80013a6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001316:	4b1d      	ldr	r3, [pc, #116]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f023 0219 	bic.w	r2, r3, #25
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	491a      	ldr	r1, [pc, #104]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 8001324:	4313      	orrs	r3, r2
 8001326:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001328:	f7ff fb60 	bl	80009ec <HAL_GetTick>
 800132c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001330:	f7ff fb5c 	bl	80009ec <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e332      	b.n	80019a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001342:	4b12      	ldr	r3, [pc, #72]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0f0      	beq.n	8001330 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134e:	f7ff fb7d 	bl	8000a4c <HAL_GetREVID>
 8001352:	4603      	mov	r3, r0
 8001354:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001358:	4293      	cmp	r3, r2
 800135a:	d819      	bhi.n	8001390 <HAL_RCC_OscConfig+0x28c>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	2b40      	cmp	r3, #64	@ 0x40
 8001362:	d108      	bne.n	8001376 <HAL_RCC_OscConfig+0x272>
 8001364:	4b09      	ldr	r3, [pc, #36]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800136c:	4a07      	ldr	r2, [pc, #28]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 800136e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001372:	6053      	str	r3, [r2, #4]
 8001374:	e030      	b.n	80013d8 <HAL_RCC_OscConfig+0x2d4>
 8001376:	4b05      	ldr	r3, [pc, #20]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	031b      	lsls	r3, r3, #12
 8001384:	4901      	ldr	r1, [pc, #4]	@ (800138c <HAL_RCC_OscConfig+0x288>)
 8001386:	4313      	orrs	r3, r2
 8001388:	604b      	str	r3, [r1, #4]
 800138a:	e025      	b.n	80013d8 <HAL_RCC_OscConfig+0x2d4>
 800138c:	58024400 	.word	0x58024400
 8001390:	4b9a      	ldr	r3, [pc, #616]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	061b      	lsls	r3, r3, #24
 800139e:	4997      	ldr	r1, [pc, #604]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]
 80013a4:	e018      	b.n	80013d8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a6:	4b95      	ldr	r3, [pc, #596]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a94      	ldr	r2, [pc, #592]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 80013ac:	f023 0301 	bic.w	r3, r3, #1
 80013b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b2:	f7ff fb1b 	bl	80009ec <HAL_GetTick>
 80013b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ba:	f7ff fb17 	bl	80009ec <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e2ed      	b.n	80019a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013cc:	4b8b      	ldr	r3, [pc, #556]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f0      	bne.n	80013ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0310 	and.w	r3, r3, #16
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f000 80a9 	beq.w	8001538 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013e6:	4b85      	ldr	r3, [pc, #532]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80013ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013f0:	4b82      	ldr	r3, [pc, #520]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 80013f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	2b08      	cmp	r3, #8
 80013fa:	d007      	beq.n	800140c <HAL_RCC_OscConfig+0x308>
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	2b18      	cmp	r3, #24
 8001400:	d13a      	bne.n	8001478 <HAL_RCC_OscConfig+0x374>
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	2b01      	cmp	r3, #1
 800140a:	d135      	bne.n	8001478 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800140c:	4b7b      	ldr	r3, [pc, #492]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001414:	2b00      	cmp	r3, #0
 8001416:	d005      	beq.n	8001424 <HAL_RCC_OscConfig+0x320>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69db      	ldr	r3, [r3, #28]
 800141c:	2b80      	cmp	r3, #128	@ 0x80
 800141e:	d001      	beq.n	8001424 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e2c1      	b.n	80019a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001424:	f7ff fb12 	bl	8000a4c <HAL_GetREVID>
 8001428:	4603      	mov	r3, r0
 800142a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800142e:	4293      	cmp	r3, r2
 8001430:	d817      	bhi.n	8001462 <HAL_RCC_OscConfig+0x35e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	2b20      	cmp	r3, #32
 8001438:	d108      	bne.n	800144c <HAL_RCC_OscConfig+0x348>
 800143a:	4b70      	ldr	r3, [pc, #448]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001442:	4a6e      	ldr	r2, [pc, #440]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 8001444:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001448:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800144a:	e075      	b.n	8001538 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800144c:	4b6b      	ldr	r3, [pc, #428]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	069b      	lsls	r3, r3, #26
 800145a:	4968      	ldr	r1, [pc, #416]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 800145c:	4313      	orrs	r3, r2
 800145e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001460:	e06a      	b.n	8001538 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001462:	4b66      	ldr	r3, [pc, #408]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	061b      	lsls	r3, r3, #24
 8001470:	4962      	ldr	r1, [pc, #392]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 8001472:	4313      	orrs	r3, r2
 8001474:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001476:	e05f      	b.n	8001538 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d042      	beq.n	8001506 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001480:	4b5e      	ldr	r3, [pc, #376]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a5d      	ldr	r2, [pc, #372]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 8001486:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800148a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148c:	f7ff faae 	bl	80009ec <HAL_GetTick>
 8001490:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001494:	f7ff faaa 	bl	80009ec <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e280      	b.n	80019a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014a6:	4b55      	ldr	r3, [pc, #340]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014b2:	f7ff facb 	bl	8000a4c <HAL_GetREVID>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80014bc:	4293      	cmp	r3, r2
 80014be:	d817      	bhi.n	80014f0 <HAL_RCC_OscConfig+0x3ec>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	2b20      	cmp	r3, #32
 80014c6:	d108      	bne.n	80014da <HAL_RCC_OscConfig+0x3d6>
 80014c8:	4b4c      	ldr	r3, [pc, #304]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80014d0:	4a4a      	ldr	r2, [pc, #296]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 80014d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80014d6:	6053      	str	r3, [r2, #4]
 80014d8:	e02e      	b.n	8001538 <HAL_RCC_OscConfig+0x434>
 80014da:	4b48      	ldr	r3, [pc, #288]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	069b      	lsls	r3, r3, #26
 80014e8:	4944      	ldr	r1, [pc, #272]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	604b      	str	r3, [r1, #4]
 80014ee:	e023      	b.n	8001538 <HAL_RCC_OscConfig+0x434>
 80014f0:	4b42      	ldr	r3, [pc, #264]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	061b      	lsls	r3, r3, #24
 80014fe:	493f      	ldr	r1, [pc, #252]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 8001500:	4313      	orrs	r3, r2
 8001502:	60cb      	str	r3, [r1, #12]
 8001504:	e018      	b.n	8001538 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001506:	4b3d      	ldr	r3, [pc, #244]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a3c      	ldr	r2, [pc, #240]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 800150c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001512:	f7ff fa6b 	bl	80009ec <HAL_GetTick>
 8001516:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800151a:	f7ff fa67 	bl	80009ec <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e23d      	b.n	80019a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800152c:	4b33      	ldr	r3, [pc, #204]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f0      	bne.n	800151a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0308 	and.w	r3, r3, #8
 8001540:	2b00      	cmp	r3, #0
 8001542:	d036      	beq.n	80015b2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d019      	beq.n	8001580 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154c:	4b2b      	ldr	r3, [pc, #172]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 800154e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001550:	4a2a      	ldr	r2, [pc, #168]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001558:	f7ff fa48 	bl	80009ec <HAL_GetTick>
 800155c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001560:	f7ff fa44 	bl	80009ec <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e21a      	b.n	80019a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001572:	4b22      	ldr	r3, [pc, #136]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 8001574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0x45c>
 800157e:	e018      	b.n	80015b2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001580:	4b1e      	ldr	r3, [pc, #120]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 8001582:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001584:	4a1d      	ldr	r2, [pc, #116]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 8001586:	f023 0301 	bic.w	r3, r3, #1
 800158a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158c:	f7ff fa2e 	bl	80009ec <HAL_GetTick>
 8001590:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001594:	f7ff fa2a 	bl	80009ec <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e200      	b.n	80019a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015a6:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 80015a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0320 	and.w	r3, r3, #32
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d039      	beq.n	8001632 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d01c      	beq.n	8001600 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015c6:	4b0d      	ldr	r3, [pc, #52]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a0c      	ldr	r2, [pc, #48]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 80015cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80015d2:	f7ff fa0b 	bl	80009ec <HAL_GetTick>
 80015d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015da:	f7ff fa07 	bl	80009ec <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e1dd      	b.n	80019a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015ec:	4b03      	ldr	r3, [pc, #12]	@ (80015fc <HAL_RCC_OscConfig+0x4f8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0f0      	beq.n	80015da <HAL_RCC_OscConfig+0x4d6>
 80015f8:	e01b      	b.n	8001632 <HAL_RCC_OscConfig+0x52e>
 80015fa:	bf00      	nop
 80015fc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001600:	4b9b      	ldr	r3, [pc, #620]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a9a      	ldr	r2, [pc, #616]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 8001606:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800160a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800160c:	f7ff f9ee 	bl	80009ec <HAL_GetTick>
 8001610:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001614:	f7ff f9ea 	bl	80009ec <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e1c0      	b.n	80019a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001626:	4b92      	ldr	r3, [pc, #584]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 8081 	beq.w	8001742 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001640:	4b8c      	ldr	r3, [pc, #560]	@ (8001874 <HAL_RCC_OscConfig+0x770>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a8b      	ldr	r2, [pc, #556]	@ (8001874 <HAL_RCC_OscConfig+0x770>)
 8001646:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800164a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800164c:	f7ff f9ce 	bl	80009ec <HAL_GetTick>
 8001650:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001654:	f7ff f9ca 	bl	80009ec <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b64      	cmp	r3, #100	@ 0x64
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e1a0      	b.n	80019a8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001666:	4b83      	ldr	r3, [pc, #524]	@ (8001874 <HAL_RCC_OscConfig+0x770>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d106      	bne.n	8001688 <HAL_RCC_OscConfig+0x584>
 800167a:	4b7d      	ldr	r3, [pc, #500]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 800167c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800167e:	4a7c      	ldr	r2, [pc, #496]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6713      	str	r3, [r2, #112]	@ 0x70
 8001686:	e02d      	b.n	80016e4 <HAL_RCC_OscConfig+0x5e0>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10c      	bne.n	80016aa <HAL_RCC_OscConfig+0x5a6>
 8001690:	4b77      	ldr	r3, [pc, #476]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 8001692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001694:	4a76      	ldr	r2, [pc, #472]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 8001696:	f023 0301 	bic.w	r3, r3, #1
 800169a:	6713      	str	r3, [r2, #112]	@ 0x70
 800169c:	4b74      	ldr	r3, [pc, #464]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 800169e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a0:	4a73      	ldr	r2, [pc, #460]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 80016a2:	f023 0304 	bic.w	r3, r3, #4
 80016a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80016a8:	e01c      	b.n	80016e4 <HAL_RCC_OscConfig+0x5e0>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b05      	cmp	r3, #5
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0x5c8>
 80016b2:	4b6f      	ldr	r3, [pc, #444]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 80016b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b6:	4a6e      	ldr	r2, [pc, #440]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80016be:	4b6c      	ldr	r3, [pc, #432]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 80016c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c2:	4a6b      	ldr	r2, [pc, #428]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ca:	e00b      	b.n	80016e4 <HAL_RCC_OscConfig+0x5e0>
 80016cc:	4b68      	ldr	r3, [pc, #416]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 80016ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d0:	4a67      	ldr	r2, [pc, #412]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 80016d2:	f023 0301 	bic.w	r3, r3, #1
 80016d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80016d8:	4b65      	ldr	r3, [pc, #404]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016dc:	4a64      	ldr	r2, [pc, #400]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 80016de:	f023 0304 	bic.w	r3, r3, #4
 80016e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d015      	beq.n	8001718 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ec:	f7ff f97e 	bl	80009ec <HAL_GetTick>
 80016f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016f2:	e00a      	b.n	800170a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f4:	f7ff f97a 	bl	80009ec <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001702:	4293      	cmp	r3, r2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e14e      	b.n	80019a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800170a:	4b59      	ldr	r3, [pc, #356]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 800170c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0ee      	beq.n	80016f4 <HAL_RCC_OscConfig+0x5f0>
 8001716:	e014      	b.n	8001742 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001718:	f7ff f968 	bl	80009ec <HAL_GetTick>
 800171c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800171e:	e00a      	b.n	8001736 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001720:	f7ff f964 	bl	80009ec <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e138      	b.n	80019a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001736:	4b4e      	ldr	r3, [pc, #312]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 8001738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1ee      	bne.n	8001720 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 812d 	beq.w	80019a6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800174c:	4b48      	ldr	r3, [pc, #288]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001754:	2b18      	cmp	r3, #24
 8001756:	f000 80bd 	beq.w	80018d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175e:	2b02      	cmp	r3, #2
 8001760:	f040 809e 	bne.w	80018a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001764:	4b42      	ldr	r3, [pc, #264]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a41      	ldr	r2, [pc, #260]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 800176a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800176e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001770:	f7ff f93c 	bl	80009ec <HAL_GetTick>
 8001774:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001778:	f7ff f938 	bl	80009ec <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e10e      	b.n	80019a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800178a:	4b39      	ldr	r3, [pc, #228]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001796:	4b36      	ldr	r3, [pc, #216]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 8001798:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800179a:	4b37      	ldr	r3, [pc, #220]	@ (8001878 <HAL_RCC_OscConfig+0x774>)
 800179c:	4013      	ands	r3, r2
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80017a6:	0112      	lsls	r2, r2, #4
 80017a8:	430a      	orrs	r2, r1
 80017aa:	4931      	ldr	r1, [pc, #196]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b4:	3b01      	subs	r3, #1
 80017b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017be:	3b01      	subs	r3, #1
 80017c0:	025b      	lsls	r3, r3, #9
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017ca:	3b01      	subs	r3, #1
 80017cc:	041b      	lsls	r3, r3, #16
 80017ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017d8:	3b01      	subs	r3, #1
 80017da:	061b      	lsls	r3, r3, #24
 80017dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80017e0:	4923      	ldr	r1, [pc, #140]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80017e6:	4b22      	ldr	r3, [pc, #136]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 80017e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ea:	4a21      	ldr	r2, [pc, #132]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 80017ec:	f023 0301 	bic.w	r3, r3, #1
 80017f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80017f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 80017f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017f6:	4b21      	ldr	r3, [pc, #132]	@ (800187c <HAL_RCC_OscConfig+0x778>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80017fe:	00d2      	lsls	r2, r2, #3
 8001800:	491b      	ldr	r1, [pc, #108]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 8001802:	4313      	orrs	r3, r2
 8001804:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001806:	4b1a      	ldr	r3, [pc, #104]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 8001808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180a:	f023 020c 	bic.w	r2, r3, #12
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	4917      	ldr	r1, [pc, #92]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 8001814:	4313      	orrs	r3, r2
 8001816:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001818:	4b15      	ldr	r3, [pc, #84]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 800181a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800181c:	f023 0202 	bic.w	r2, r3, #2
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001824:	4912      	ldr	r1, [pc, #72]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 8001826:	4313      	orrs	r3, r2
 8001828:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800182a:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 800182c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182e:	4a10      	ldr	r2, [pc, #64]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 8001830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001834:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001836:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 8001838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800183a:	4a0d      	ldr	r2, [pc, #52]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 800183c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001840:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001842:	4b0b      	ldr	r3, [pc, #44]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 8001844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001846:	4a0a      	ldr	r2, [pc, #40]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 8001848:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800184c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800184e:	4b08      	ldr	r3, [pc, #32]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 8001850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001852:	4a07      	ldr	r2, [pc, #28]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800185a:	4b05      	ldr	r3, [pc, #20]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a04      	ldr	r2, [pc, #16]	@ (8001870 <HAL_RCC_OscConfig+0x76c>)
 8001860:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001866:	f7ff f8c1 	bl	80009ec <HAL_GetTick>
 800186a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800186c:	e011      	b.n	8001892 <HAL_RCC_OscConfig+0x78e>
 800186e:	bf00      	nop
 8001870:	58024400 	.word	0x58024400
 8001874:	58024800 	.word	0x58024800
 8001878:	fffffc0c 	.word	0xfffffc0c
 800187c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001880:	f7ff f8b4 	bl	80009ec <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e08a      	b.n	80019a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001892:	4b47      	ldr	r3, [pc, #284]	@ (80019b0 <HAL_RCC_OscConfig+0x8ac>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0x77c>
 800189e:	e082      	b.n	80019a6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a0:	4b43      	ldr	r3, [pc, #268]	@ (80019b0 <HAL_RCC_OscConfig+0x8ac>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a42      	ldr	r2, [pc, #264]	@ (80019b0 <HAL_RCC_OscConfig+0x8ac>)
 80018a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ac:	f7ff f89e 	bl	80009ec <HAL_GetTick>
 80018b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b4:	f7ff f89a 	bl	80009ec <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e070      	b.n	80019a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018c6:	4b3a      	ldr	r3, [pc, #232]	@ (80019b0 <HAL_RCC_OscConfig+0x8ac>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x7b0>
 80018d2:	e068      	b.n	80019a6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80018d4:	4b36      	ldr	r3, [pc, #216]	@ (80019b0 <HAL_RCC_OscConfig+0x8ac>)
 80018d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80018da:	4b35      	ldr	r3, [pc, #212]	@ (80019b0 <HAL_RCC_OscConfig+0x8ac>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d031      	beq.n	800194c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	f003 0203 	and.w	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d12a      	bne.n	800194c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001902:	429a      	cmp	r2, r3
 8001904:	d122      	bne.n	800194c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001910:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001912:	429a      	cmp	r2, r3
 8001914:	d11a      	bne.n	800194c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	0a5b      	lsrs	r3, r3, #9
 800191a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001922:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001924:	429a      	cmp	r2, r3
 8001926:	d111      	bne.n	800194c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	0c1b      	lsrs	r3, r3, #16
 800192c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001934:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001936:	429a      	cmp	r2, r3
 8001938:	d108      	bne.n	800194c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	0e1b      	lsrs	r3, r3, #24
 800193e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001946:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e02b      	b.n	80019a8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001950:	4b17      	ldr	r3, [pc, #92]	@ (80019b0 <HAL_RCC_OscConfig+0x8ac>)
 8001952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001954:	08db      	lsrs	r3, r3, #3
 8001956:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800195a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	429a      	cmp	r2, r3
 8001964:	d01f      	beq.n	80019a6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001966:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <HAL_RCC_OscConfig+0x8ac>)
 8001968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196a:	4a11      	ldr	r2, [pc, #68]	@ (80019b0 <HAL_RCC_OscConfig+0x8ac>)
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001972:	f7ff f83b 	bl	80009ec <HAL_GetTick>
 8001976:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001978:	bf00      	nop
 800197a:	f7ff f837 	bl	80009ec <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001982:	4293      	cmp	r3, r2
 8001984:	d0f9      	beq.n	800197a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001986:	4b0a      	ldr	r3, [pc, #40]	@ (80019b0 <HAL_RCC_OscConfig+0x8ac>)
 8001988:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800198a:	4b0a      	ldr	r3, [pc, #40]	@ (80019b4 <HAL_RCC_OscConfig+0x8b0>)
 800198c:	4013      	ands	r3, r2
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001992:	00d2      	lsls	r2, r2, #3
 8001994:	4906      	ldr	r1, [pc, #24]	@ (80019b0 <HAL_RCC_OscConfig+0x8ac>)
 8001996:	4313      	orrs	r3, r2
 8001998:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800199a:	4b05      	ldr	r3, [pc, #20]	@ (80019b0 <HAL_RCC_OscConfig+0x8ac>)
 800199c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800199e:	4a04      	ldr	r2, [pc, #16]	@ (80019b0 <HAL_RCC_OscConfig+0x8ac>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3730      	adds	r7, #48	@ 0x30
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	58024400 	.word	0x58024400
 80019b4:	ffff0007 	.word	0xffff0007

080019b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e19c      	b.n	8001d06 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019cc:	4b8a      	ldr	r3, [pc, #552]	@ (8001bf8 <HAL_RCC_ClockConfig+0x240>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 030f 	and.w	r3, r3, #15
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d910      	bls.n	80019fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019da:	4b87      	ldr	r3, [pc, #540]	@ (8001bf8 <HAL_RCC_ClockConfig+0x240>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f023 020f 	bic.w	r2, r3, #15
 80019e2:	4985      	ldr	r1, [pc, #532]	@ (8001bf8 <HAL_RCC_ClockConfig+0x240>)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ea:	4b83      	ldr	r3, [pc, #524]	@ (8001bf8 <HAL_RCC_ClockConfig+0x240>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d001      	beq.n	80019fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e184      	b.n	8001d06 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d010      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691a      	ldr	r2, [r3, #16]
 8001a0c:	4b7b      	ldr	r3, [pc, #492]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d908      	bls.n	8001a2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a18:	4b78      	ldr	r3, [pc, #480]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	4975      	ldr	r1, [pc, #468]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d010      	beq.n	8001a58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695a      	ldr	r2, [r3, #20]
 8001a3a:	4b70      	ldr	r3, [pc, #448]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d908      	bls.n	8001a58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a46:	4b6d      	ldr	r3, [pc, #436]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	496a      	ldr	r1, [pc, #424]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0310 	and.w	r3, r3, #16
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d010      	beq.n	8001a86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	699a      	ldr	r2, [r3, #24]
 8001a68:	4b64      	ldr	r3, [pc, #400]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d908      	bls.n	8001a86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a74:	4b61      	ldr	r3, [pc, #388]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	495e      	ldr	r1, [pc, #376]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0320 	and.w	r3, r3, #32
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d010      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69da      	ldr	r2, [r3, #28]
 8001a96:	4b59      	ldr	r3, [pc, #356]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d908      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001aa2:	4b56      	ldr	r3, [pc, #344]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	4953      	ldr	r1, [pc, #332]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d010      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	4b4d      	ldr	r3, [pc, #308]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f003 030f 	and.w	r3, r3, #15
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d908      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad0:	4b4a      	ldr	r3, [pc, #296]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f023 020f 	bic.w	r2, r3, #15
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	4947      	ldr	r1, [pc, #284]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d055      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001aee:	4b43      	ldr	r3, [pc, #268]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	4940      	ldr	r1, [pc, #256]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d107      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b08:	4b3c      	ldr	r3, [pc, #240]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d121      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0f6      	b.n	8001d06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d107      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b20:	4b36      	ldr	r3, [pc, #216]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d115      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0ea      	b.n	8001d06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d107      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b38:	4b30      	ldr	r3, [pc, #192]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d109      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0de      	b.n	8001d06 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b48:	4b2c      	ldr	r3, [pc, #176]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0d6      	b.n	8001d06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b58:	4b28      	ldr	r3, [pc, #160]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	f023 0207 	bic.w	r2, r3, #7
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	4925      	ldr	r1, [pc, #148]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b6a:	f7fe ff3f 	bl	80009ec <HAL_GetTick>
 8001b6e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b70:	e00a      	b.n	8001b88 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b72:	f7fe ff3b 	bl	80009ec <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e0be      	b.n	8001d06 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b88:	4b1c      	ldr	r3, [pc, #112]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d1eb      	bne.n	8001b72 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d010      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	4b14      	ldr	r3, [pc, #80]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d208      	bcs.n	8001bc8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb6:	4b11      	ldr	r3, [pc, #68]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	f023 020f 	bic.w	r2, r3, #15
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	490e      	ldr	r1, [pc, #56]	@ (8001bfc <HAL_RCC_ClockConfig+0x244>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <HAL_RCC_ClockConfig+0x240>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 030f 	and.w	r3, r3, #15
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d214      	bcs.n	8001c00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	4b08      	ldr	r3, [pc, #32]	@ (8001bf8 <HAL_RCC_ClockConfig+0x240>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 020f 	bic.w	r2, r3, #15
 8001bde:	4906      	ldr	r1, [pc, #24]	@ (8001bf8 <HAL_RCC_ClockConfig+0x240>)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be6:	4b04      	ldr	r3, [pc, #16]	@ (8001bf8 <HAL_RCC_ClockConfig+0x240>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d005      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e086      	b.n	8001d06 <HAL_RCC_ClockConfig+0x34e>
 8001bf8:	52002000 	.word	0x52002000
 8001bfc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d010      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	4b3f      	ldr	r3, [pc, #252]	@ (8001d10 <HAL_RCC_ClockConfig+0x358>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d208      	bcs.n	8001c2e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c1c:	4b3c      	ldr	r3, [pc, #240]	@ (8001d10 <HAL_RCC_ClockConfig+0x358>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	4939      	ldr	r1, [pc, #228]	@ (8001d10 <HAL_RCC_ClockConfig+0x358>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d010      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695a      	ldr	r2, [r3, #20]
 8001c3e:	4b34      	ldr	r3, [pc, #208]	@ (8001d10 <HAL_RCC_ClockConfig+0x358>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d208      	bcs.n	8001c5c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c4a:	4b31      	ldr	r3, [pc, #196]	@ (8001d10 <HAL_RCC_ClockConfig+0x358>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	492e      	ldr	r1, [pc, #184]	@ (8001d10 <HAL_RCC_ClockConfig+0x358>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0310 	and.w	r3, r3, #16
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d010      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	699a      	ldr	r2, [r3, #24]
 8001c6c:	4b28      	ldr	r3, [pc, #160]	@ (8001d10 <HAL_RCC_ClockConfig+0x358>)
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d208      	bcs.n	8001c8a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c78:	4b25      	ldr	r3, [pc, #148]	@ (8001d10 <HAL_RCC_ClockConfig+0x358>)
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4922      	ldr	r1, [pc, #136]	@ (8001d10 <HAL_RCC_ClockConfig+0x358>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0320 	and.w	r3, r3, #32
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d010      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69da      	ldr	r2, [r3, #28]
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d10 <HAL_RCC_ClockConfig+0x358>)
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d208      	bcs.n	8001cb8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d10 <HAL_RCC_ClockConfig+0x358>)
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	4917      	ldr	r1, [pc, #92]	@ (8001d10 <HAL_RCC_ClockConfig+0x358>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cb8:	f000 f89e 	bl	8001df8 <HAL_RCC_GetSysClockFreq>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	4b14      	ldr	r3, [pc, #80]	@ (8001d10 <HAL_RCC_ClockConfig+0x358>)
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	0a1b      	lsrs	r3, r3, #8
 8001cc4:	f003 030f 	and.w	r3, r3, #15
 8001cc8:	4912      	ldr	r1, [pc, #72]	@ (8001d14 <HAL_RCC_ClockConfig+0x35c>)
 8001cca:	5ccb      	ldrb	r3, [r1, r3]
 8001ccc:	f003 031f 	and.w	r3, r3, #31
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <HAL_RCC_ClockConfig+0x358>)
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	4a0d      	ldr	r2, [pc, #52]	@ (8001d14 <HAL_RCC_ClockConfig+0x35c>)
 8001ce0:	5cd3      	ldrb	r3, [r2, r3]
 8001ce2:	f003 031f 	and.w	r3, r3, #31
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cec:	4a0a      	ldr	r2, [pc, #40]	@ (8001d18 <HAL_RCC_ClockConfig+0x360>)
 8001cee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8001d1c <HAL_RCC_ClockConfig+0x364>)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <HAL_RCC_ClockConfig+0x368>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fe2c 	bl	8000958 <HAL_InitTick>
 8001d00:	4603      	mov	r3, r0
 8001d02:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	58024400 	.word	0x58024400
 8001d14:	080038b8 	.word	0x080038b8
 8001d18:	24000004 	.word	0x24000004
 8001d1c:	24000000 	.word	0x24000000
 8001d20:	24000018 	.word	0x24000018

08001d24 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08c      	sub	sp, #48	@ 0x30
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d12a      	bne.n	8001d8c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8001d36:	4b2d      	ldr	r3, [pc, #180]	@ (8001dec <HAL_RCC_MCOConfig+0xc8>)
 8001d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d3c:	4a2b      	ldr	r2, [pc, #172]	@ (8001dec <HAL_RCC_MCOConfig+0xc8>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d46:	4b29      	ldr	r3, [pc, #164]	@ (8001dec <HAL_RCC_MCOConfig+0xc8>)
 8001d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	61bb      	str	r3, [r7, #24]
 8001d52:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8001d54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001d66:	2300      	movs	r3, #0
 8001d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001d6a:	f107 031c 	add.w	r3, r7, #28
 8001d6e:	4619      	mov	r1, r3
 8001d70:	481f      	ldr	r0, [pc, #124]	@ (8001df0 <HAL_RCC_MCOConfig+0xcc>)
 8001d72:	f7fe ff5b 	bl	8000c2c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8001d76:	4b1d      	ldr	r3, [pc, #116]	@ (8001dec <HAL_RCC_MCOConfig+0xc8>)
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8001d7e:	68b9      	ldr	r1, [r7, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	430b      	orrs	r3, r1
 8001d84:	4919      	ldr	r1, [pc, #100]	@ (8001dec <HAL_RCC_MCOConfig+0xc8>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8001d8a:	e02a      	b.n	8001de2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8001d8c:	4b17      	ldr	r3, [pc, #92]	@ (8001dec <HAL_RCC_MCOConfig+0xc8>)
 8001d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d92:	4a16      	ldr	r2, [pc, #88]	@ (8001dec <HAL_RCC_MCOConfig+0xc8>)
 8001d94:	f043 0304 	orr.w	r3, r3, #4
 8001d98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d9c:	4b13      	ldr	r3, [pc, #76]	@ (8001dec <HAL_RCC_MCOConfig+0xc8>)
 8001d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8001daa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8001dc0:	f107 031c 	add.w	r3, r7, #28
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	480b      	ldr	r0, [pc, #44]	@ (8001df4 <HAL_RCC_MCOConfig+0xd0>)
 8001dc8:	f7fe ff30 	bl	8000c2c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8001dcc:	4b07      	ldr	r3, [pc, #28]	@ (8001dec <HAL_RCC_MCOConfig+0xc8>)
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	01d9      	lsls	r1, r3, #7
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	430b      	orrs	r3, r1
 8001ddc:	4903      	ldr	r1, [pc, #12]	@ (8001dec <HAL_RCC_MCOConfig+0xc8>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	610b      	str	r3, [r1, #16]
}
 8001de2:	bf00      	nop
 8001de4:	3730      	adds	r7, #48	@ 0x30
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	58024400 	.word	0x58024400
 8001df0:	58020000 	.word	0x58020000
 8001df4:	58020800 	.word	0x58020800

08001df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	@ 0x24
 8001dfc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dfe:	4bb3      	ldr	r3, [pc, #716]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e06:	2b18      	cmp	r3, #24
 8001e08:	f200 8155 	bhi.w	80020b6 <HAL_RCC_GetSysClockFreq+0x2be>
 8001e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e12:	bf00      	nop
 8001e14:	08001e79 	.word	0x08001e79
 8001e18:	080020b7 	.word	0x080020b7
 8001e1c:	080020b7 	.word	0x080020b7
 8001e20:	080020b7 	.word	0x080020b7
 8001e24:	080020b7 	.word	0x080020b7
 8001e28:	080020b7 	.word	0x080020b7
 8001e2c:	080020b7 	.word	0x080020b7
 8001e30:	080020b7 	.word	0x080020b7
 8001e34:	08001e9f 	.word	0x08001e9f
 8001e38:	080020b7 	.word	0x080020b7
 8001e3c:	080020b7 	.word	0x080020b7
 8001e40:	080020b7 	.word	0x080020b7
 8001e44:	080020b7 	.word	0x080020b7
 8001e48:	080020b7 	.word	0x080020b7
 8001e4c:	080020b7 	.word	0x080020b7
 8001e50:	080020b7 	.word	0x080020b7
 8001e54:	08001ea5 	.word	0x08001ea5
 8001e58:	080020b7 	.word	0x080020b7
 8001e5c:	080020b7 	.word	0x080020b7
 8001e60:	080020b7 	.word	0x080020b7
 8001e64:	080020b7 	.word	0x080020b7
 8001e68:	080020b7 	.word	0x080020b7
 8001e6c:	080020b7 	.word	0x080020b7
 8001e70:	080020b7 	.word	0x080020b7
 8001e74:	08001eab 	.word	0x08001eab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e78:	4b94      	ldr	r3, [pc, #592]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0320 	and.w	r3, r3, #32
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d009      	beq.n	8001e98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e84:	4b91      	ldr	r3, [pc, #580]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	08db      	lsrs	r3, r3, #3
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	4a90      	ldr	r2, [pc, #576]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
 8001e94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001e96:	e111      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e98:	4b8d      	ldr	r3, [pc, #564]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e9a:	61bb      	str	r3, [r7, #24]
      break;
 8001e9c:	e10e      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001e9e:	4b8d      	ldr	r3, [pc, #564]	@ (80020d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ea0:	61bb      	str	r3, [r7, #24]
      break;
 8001ea2:	e10b      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001ea4:	4b8c      	ldr	r3, [pc, #560]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001ea6:	61bb      	str	r3, [r7, #24]
      break;
 8001ea8:	e108      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001eaa:	4b88      	ldr	r3, [pc, #544]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001eb4:	4b85      	ldr	r3, [pc, #532]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ebe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ec0:	4b82      	ldr	r3, [pc, #520]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001eca:	4b80      	ldr	r3, [pc, #512]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ece:	08db      	lsrs	r3, r3, #3
 8001ed0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	fb02 f303 	mul.w	r3, r2, r3
 8001eda:	ee07 3a90 	vmov	s15, r3
 8001ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ee2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 80e1 	beq.w	80020b0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	f000 8083 	beq.w	8001ffc <HAL_RCC_GetSysClockFreq+0x204>
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	f200 80a1 	bhi.w	8002040 <HAL_RCC_GetSysClockFreq+0x248>
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x114>
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d056      	beq.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001f0a:	e099      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f0c:	4b6f      	ldr	r3, [pc, #444]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0320 	and.w	r3, r3, #32
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d02d      	beq.n	8001f74 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001f18:	4b6c      	ldr	r3, [pc, #432]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	08db      	lsrs	r3, r3, #3
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	4a6b      	ldr	r2, [pc, #428]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
 8001f28:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	ee07 3a90 	vmov	s15, r3
 8001f30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	ee07 3a90 	vmov	s15, r3
 8001f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f42:	4b62      	ldr	r3, [pc, #392]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f4a:	ee07 3a90 	vmov	s15, r3
 8001f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f52:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f56:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80020dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f6e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001f72:	e087      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	ee07 3a90 	vmov	s15, r3
 8001f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f7e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80020e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f86:	4b51      	ldr	r3, [pc, #324]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f8e:	ee07 3a90 	vmov	s15, r3
 8001f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f96:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f9a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80020dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fb6:	e065      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	ee07 3a90 	vmov	s15, r3
 8001fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fc2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80020e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fca:	4b40      	ldr	r3, [pc, #256]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fd2:	ee07 3a90 	vmov	s15, r3
 8001fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fda:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fde:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80020dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001ffa:	e043      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	ee07 3a90 	vmov	s15, r3
 8002002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002006:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80020e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800200a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800200e:	4b2f      	ldr	r3, [pc, #188]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002016:	ee07 3a90 	vmov	s15, r3
 800201a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800201e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002022:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80020dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800202a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800202e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800203a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800203e:	e021      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	ee07 3a90 	vmov	s15, r3
 8002046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800204a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80020e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800204e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002052:	4b1e      	ldr	r3, [pc, #120]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800205a:	ee07 3a90 	vmov	s15, r3
 800205e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002062:	ed97 6a02 	vldr	s12, [r7, #8]
 8002066:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80020dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800206a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800206e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002072:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800207a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800207e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002082:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002084:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002088:	0a5b      	lsrs	r3, r3, #9
 800208a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800208e:	3301      	adds	r3, #1
 8002090:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	ee07 3a90 	vmov	s15, r3
 8002098:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800209c:	edd7 6a07 	vldr	s13, [r7, #28]
 80020a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020a8:	ee17 3a90 	vmov	r3, s15
 80020ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80020ae:	e005      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61bb      	str	r3, [r7, #24]
      break;
 80020b4:	e002      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80020b6:	4b07      	ldr	r3, [pc, #28]	@ (80020d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80020b8:	61bb      	str	r3, [r7, #24]
      break;
 80020ba:	bf00      	nop
  }

  return sysclockfreq;
 80020bc:	69bb      	ldr	r3, [r7, #24]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3724      	adds	r7, #36	@ 0x24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	58024400 	.word	0x58024400
 80020d0:	03d09000 	.word	0x03d09000
 80020d4:	003d0900 	.word	0x003d0900
 80020d8:	017d7840 	.word	0x017d7840
 80020dc:	46000000 	.word	0x46000000
 80020e0:	4c742400 	.word	0x4c742400
 80020e4:	4a742400 	.word	0x4a742400
 80020e8:	4bbebc20 	.word	0x4bbebc20

080020ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020f0:	b0cc      	sub	sp, #304	@ 0x130
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020f8:	2300      	movs	r3, #0
 80020fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020fe:	2300      	movs	r3, #0
 8002100:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002104:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002110:	2500      	movs	r5, #0
 8002112:	ea54 0305 	orrs.w	r3, r4, r5
 8002116:	d049      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002118:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800211c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800211e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002122:	d02f      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002124:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002128:	d828      	bhi.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800212a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800212e:	d01a      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002130:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002134:	d822      	bhi.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800213a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800213e:	d007      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002140:	e01c      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002142:	4bb8      	ldr	r3, [pc, #736]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002146:	4ab7      	ldr	r2, [pc, #732]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800214c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800214e:	e01a      	b.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002150:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002154:	3308      	adds	r3, #8
 8002156:	2102      	movs	r1, #2
 8002158:	4618      	mov	r0, r3
 800215a:	f001 fa11 	bl	8003580 <RCCEx_PLL2_Config>
 800215e:	4603      	mov	r3, r0
 8002160:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002164:	e00f      	b.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002166:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800216a:	3328      	adds	r3, #40	@ 0x28
 800216c:	2102      	movs	r1, #2
 800216e:	4618      	mov	r0, r3
 8002170:	f001 fab8 	bl	80036e4 <RCCEx_PLL3_Config>
 8002174:	4603      	mov	r3, r0
 8002176:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800217a:	e004      	b.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002182:	e000      	b.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002186:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10a      	bne.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800218e:	4ba5      	ldr	r3, [pc, #660]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002192:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002196:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800219a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800219c:	4aa1      	ldr	r2, [pc, #644]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800219e:	430b      	orrs	r3, r1
 80021a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80021a2:	e003      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80021a8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80021b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80021b8:	f04f 0900 	mov.w	r9, #0
 80021bc:	ea58 0309 	orrs.w	r3, r8, r9
 80021c0:	d047      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80021c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80021c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d82a      	bhi.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80021cc:	a201      	add	r2, pc, #4	@ (adr r2, 80021d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80021ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d2:	bf00      	nop
 80021d4:	080021e9 	.word	0x080021e9
 80021d8:	080021f7 	.word	0x080021f7
 80021dc:	0800220d 	.word	0x0800220d
 80021e0:	0800222b 	.word	0x0800222b
 80021e4:	0800222b 	.word	0x0800222b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021e8:	4b8e      	ldr	r3, [pc, #568]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ec:	4a8d      	ldr	r2, [pc, #564]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80021f4:	e01a      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80021f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80021fa:	3308      	adds	r3, #8
 80021fc:	2100      	movs	r1, #0
 80021fe:	4618      	mov	r0, r3
 8002200:	f001 f9be 	bl	8003580 <RCCEx_PLL2_Config>
 8002204:	4603      	mov	r3, r0
 8002206:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800220a:	e00f      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800220c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002210:	3328      	adds	r3, #40	@ 0x28
 8002212:	2100      	movs	r1, #0
 8002214:	4618      	mov	r0, r3
 8002216:	f001 fa65 	bl	80036e4 <RCCEx_PLL3_Config>
 800221a:	4603      	mov	r3, r0
 800221c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002220:	e004      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002228:	e000      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800222a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800222c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10a      	bne.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002234:	4b7b      	ldr	r3, [pc, #492]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002238:	f023 0107 	bic.w	r1, r3, #7
 800223c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002242:	4a78      	ldr	r2, [pc, #480]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002244:	430b      	orrs	r3, r1
 8002246:	6513      	str	r3, [r2, #80]	@ 0x50
 8002248:	e003      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800224a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800224e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002252:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800225e:	f04f 0b00 	mov.w	fp, #0
 8002262:	ea5a 030b 	orrs.w	r3, sl, fp
 8002266:	d04c      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002268:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800226c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800226e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002272:	d030      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002274:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002278:	d829      	bhi.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800227a:	2bc0      	cmp	r3, #192	@ 0xc0
 800227c:	d02d      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800227e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002280:	d825      	bhi.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002282:	2b80      	cmp	r3, #128	@ 0x80
 8002284:	d018      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002286:	2b80      	cmp	r3, #128	@ 0x80
 8002288:	d821      	bhi.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800228e:	2b40      	cmp	r3, #64	@ 0x40
 8002290:	d007      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002292:	e01c      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002294:	4b63      	ldr	r3, [pc, #396]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002298:	4a62      	ldr	r2, [pc, #392]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800229a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800229e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80022a0:	e01c      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80022a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80022a6:	3308      	adds	r3, #8
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f001 f968 	bl	8003580 <RCCEx_PLL2_Config>
 80022b0:	4603      	mov	r3, r0
 80022b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80022b6:	e011      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80022b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80022bc:	3328      	adds	r3, #40	@ 0x28
 80022be:	2100      	movs	r1, #0
 80022c0:	4618      	mov	r0, r3
 80022c2:	f001 fa0f 	bl	80036e4 <RCCEx_PLL3_Config>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80022cc:	e006      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80022d4:	e002      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80022d6:	bf00      	nop
 80022d8:	e000      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80022da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80022dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10a      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80022e4:	4b4f      	ldr	r3, [pc, #316]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022e8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80022ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80022f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f2:	4a4c      	ldr	r2, [pc, #304]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022f4:	430b      	orrs	r3, r1
 80022f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80022f8:	e003      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80022fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002302:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800230e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002312:	2300      	movs	r3, #0
 8002314:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002318:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800231c:	460b      	mov	r3, r1
 800231e:	4313      	orrs	r3, r2
 8002320:	d053      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002322:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002326:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800232a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800232e:	d035      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002330:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002334:	d82e      	bhi.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002336:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800233a:	d031      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800233c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002340:	d828      	bhi.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002342:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002346:	d01a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002348:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800234c:	d822      	bhi.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002352:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002356:	d007      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002358:	e01c      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800235a:	4b32      	ldr	r3, [pc, #200]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800235c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235e:	4a31      	ldr	r2, [pc, #196]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002364:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002366:	e01c      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002368:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800236c:	3308      	adds	r3, #8
 800236e:	2100      	movs	r1, #0
 8002370:	4618      	mov	r0, r3
 8002372:	f001 f905 	bl	8003580 <RCCEx_PLL2_Config>
 8002376:	4603      	mov	r3, r0
 8002378:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800237c:	e011      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800237e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002382:	3328      	adds	r3, #40	@ 0x28
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f001 f9ac 	bl	80036e4 <RCCEx_PLL3_Config>
 800238c:	4603      	mov	r3, r0
 800238e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002392:	e006      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800239a:	e002      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800239c:	bf00      	nop
 800239e:	e000      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80023a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80023a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10b      	bne.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80023aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ae:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80023b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80023ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023bc:	430b      	orrs	r3, r1
 80023be:	6593      	str	r3, [r2, #88]	@ 0x58
 80023c0:	e003      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80023c6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80023ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80023d6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80023da:	2300      	movs	r3, #0
 80023dc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80023e0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80023e4:	460b      	mov	r3, r1
 80023e6:	4313      	orrs	r3, r2
 80023e8:	d056      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80023ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80023f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023f6:	d038      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80023f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023fc:	d831      	bhi.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80023fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002402:	d034      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002404:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002408:	d82b      	bhi.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800240a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800240e:	d01d      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002410:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002414:	d825      	bhi.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002416:	2b00      	cmp	r3, #0
 8002418:	d006      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800241a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800241e:	d00a      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002420:	e01f      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002422:	bf00      	nop
 8002424:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002428:	4ba2      	ldr	r3, [pc, #648]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800242a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242c:	4aa1      	ldr	r2, [pc, #644]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800242e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002432:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002434:	e01c      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002436:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800243a:	3308      	adds	r3, #8
 800243c:	2100      	movs	r1, #0
 800243e:	4618      	mov	r0, r3
 8002440:	f001 f89e 	bl	8003580 <RCCEx_PLL2_Config>
 8002444:	4603      	mov	r3, r0
 8002446:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800244a:	e011      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800244c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002450:	3328      	adds	r3, #40	@ 0x28
 8002452:	2100      	movs	r1, #0
 8002454:	4618      	mov	r0, r3
 8002456:	f001 f945 	bl	80036e4 <RCCEx_PLL3_Config>
 800245a:	4603      	mov	r3, r0
 800245c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002460:	e006      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002468:	e002      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800246a:	bf00      	nop
 800246c:	e000      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800246e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002470:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10b      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002478:	4b8e      	ldr	r3, [pc, #568]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800247a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002480:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002484:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002488:	4a8a      	ldr	r2, [pc, #552]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800248a:	430b      	orrs	r3, r1
 800248c:	6593      	str	r3, [r2, #88]	@ 0x58
 800248e:	e003      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002490:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002494:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002498:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80024a4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80024a8:	2300      	movs	r3, #0
 80024aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80024ae:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80024b2:	460b      	mov	r3, r1
 80024b4:	4313      	orrs	r3, r2
 80024b6:	d03a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80024b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024be:	2b30      	cmp	r3, #48	@ 0x30
 80024c0:	d01f      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80024c2:	2b30      	cmp	r3, #48	@ 0x30
 80024c4:	d819      	bhi.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80024c6:	2b20      	cmp	r3, #32
 80024c8:	d00c      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80024ca:	2b20      	cmp	r3, #32
 80024cc:	d815      	bhi.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d019      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80024d2:	2b10      	cmp	r3, #16
 80024d4:	d111      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024d6:	4b77      	ldr	r3, [pc, #476]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024da:	4a76      	ldr	r2, [pc, #472]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80024e2:	e011      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80024e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024e8:	3308      	adds	r3, #8
 80024ea:	2102      	movs	r1, #2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f001 f847 	bl	8003580 <RCCEx_PLL2_Config>
 80024f2:	4603      	mov	r3, r0
 80024f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80024f8:	e006      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002500:	e002      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002502:	bf00      	nop
 8002504:	e000      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002506:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002508:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10a      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002510:	4b68      	ldr	r3, [pc, #416]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002514:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002518:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800251c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800251e:	4a65      	ldr	r2, [pc, #404]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002520:	430b      	orrs	r3, r1
 8002522:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002524:	e003      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002526:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800252a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800252e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002536:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800253a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800253e:	2300      	movs	r3, #0
 8002540:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002544:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002548:	460b      	mov	r3, r1
 800254a:	4313      	orrs	r3, r2
 800254c:	d051      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800254e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002552:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002554:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002558:	d035      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800255a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800255e:	d82e      	bhi.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002560:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002564:	d031      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002566:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800256a:	d828      	bhi.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800256c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002570:	d01a      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002572:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002576:	d822      	bhi.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800257c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002580:	d007      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002582:	e01c      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002584:	4b4b      	ldr	r3, [pc, #300]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002588:	4a4a      	ldr	r2, [pc, #296]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800258a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800258e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002590:	e01c      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002592:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002596:	3308      	adds	r3, #8
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f000 fff0 	bl	8003580 <RCCEx_PLL2_Config>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80025a6:	e011      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025ac:	3328      	adds	r3, #40	@ 0x28
 80025ae:	2100      	movs	r1, #0
 80025b0:	4618      	mov	r0, r3
 80025b2:	f001 f897 	bl	80036e4 <RCCEx_PLL3_Config>
 80025b6:	4603      	mov	r3, r0
 80025b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80025bc:	e006      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80025c4:	e002      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80025c6:	bf00      	nop
 80025c8:	e000      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80025ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10a      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80025d4:	4b37      	ldr	r3, [pc, #220]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025d8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80025dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025e2:	4a34      	ldr	r2, [pc, #208]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025e4:	430b      	orrs	r3, r1
 80025e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80025e8:	e003      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80025ee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80025f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80025fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002602:	2300      	movs	r3, #0
 8002604:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002608:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800260c:	460b      	mov	r3, r1
 800260e:	4313      	orrs	r3, r2
 8002610:	d056      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002612:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002616:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002618:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800261c:	d033      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800261e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002622:	d82c      	bhi.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002624:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002628:	d02f      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800262a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800262e:	d826      	bhi.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002630:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002634:	d02b      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002636:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800263a:	d820      	bhi.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800263c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002640:	d012      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002642:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002646:	d81a      	bhi.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002648:	2b00      	cmp	r3, #0
 800264a:	d022      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800264c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002650:	d115      	bne.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002652:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002656:	3308      	adds	r3, #8
 8002658:	2101      	movs	r1, #1
 800265a:	4618      	mov	r0, r3
 800265c:	f000 ff90 	bl	8003580 <RCCEx_PLL2_Config>
 8002660:	4603      	mov	r3, r0
 8002662:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002666:	e015      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002668:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800266c:	3328      	adds	r3, #40	@ 0x28
 800266e:	2101      	movs	r1, #1
 8002670:	4618      	mov	r0, r3
 8002672:	f001 f837 	bl	80036e4 <RCCEx_PLL3_Config>
 8002676:	4603      	mov	r3, r0
 8002678:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800267c:	e00a      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002684:	e006      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002686:	bf00      	nop
 8002688:	e004      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800268a:	bf00      	nop
 800268c:	e002      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800268e:	bf00      	nop
 8002690:	e000      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002692:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002694:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10d      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800269c:	4b05      	ldr	r3, [pc, #20]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800269e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026a0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80026a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026aa:	4a02      	ldr	r2, [pc, #8]	@ (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026ac:	430b      	orrs	r3, r1
 80026ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80026b0:	e006      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80026b2:	bf00      	nop
 80026b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80026bc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80026c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80026cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80026d0:	2300      	movs	r3, #0
 80026d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80026d6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80026da:	460b      	mov	r3, r1
 80026dc:	4313      	orrs	r3, r2
 80026de:	d055      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80026e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80026e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026ec:	d033      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80026ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026f2:	d82c      	bhi.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80026f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026f8:	d02f      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80026fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026fe:	d826      	bhi.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002700:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002704:	d02b      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002706:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800270a:	d820      	bhi.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800270c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002710:	d012      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002712:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002716:	d81a      	bhi.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002718:	2b00      	cmp	r3, #0
 800271a:	d022      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800271c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002720:	d115      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002722:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002726:	3308      	adds	r3, #8
 8002728:	2101      	movs	r1, #1
 800272a:	4618      	mov	r0, r3
 800272c:	f000 ff28 	bl	8003580 <RCCEx_PLL2_Config>
 8002730:	4603      	mov	r3, r0
 8002732:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002736:	e015      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002738:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800273c:	3328      	adds	r3, #40	@ 0x28
 800273e:	2101      	movs	r1, #1
 8002740:	4618      	mov	r0, r3
 8002742:	f000 ffcf 	bl	80036e4 <RCCEx_PLL3_Config>
 8002746:	4603      	mov	r3, r0
 8002748:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800274c:	e00a      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002754:	e006      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002756:	bf00      	nop
 8002758:	e004      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800275a:	bf00      	nop
 800275c:	e002      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800275e:	bf00      	nop
 8002760:	e000      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002762:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002764:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10b      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800276c:	4bb6      	ldr	r3, [pc, #728]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800276e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002770:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002774:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002778:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800277c:	4ab2      	ldr	r2, [pc, #712]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800277e:	430b      	orrs	r3, r1
 8002780:	6593      	str	r3, [r2, #88]	@ 0x58
 8002782:	e003      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002784:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002788:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800278c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002794:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8002798:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800279c:	2300      	movs	r3, #0
 800279e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027a2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4313      	orrs	r3, r2
 80027aa:	d02a      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80027ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d011      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80027b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027ba:	d10a      	bne.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80027bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027c0:	3308      	adds	r3, #8
 80027c2:	2101      	movs	r1, #1
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 fedb 	bl	8003580 <RCCEx_PLL2_Config>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80027d0:	e004      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80027d8:	e000      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80027da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10a      	bne.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80027e4:	4b98      	ldr	r3, [pc, #608]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80027e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80027ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027f2:	4a95      	ldr	r2, [pc, #596]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80027f4:	430b      	orrs	r3, r1
 80027f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027f8:	e003      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80027fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002802:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800280e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002812:	2300      	movs	r3, #0
 8002814:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002818:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800281c:	460b      	mov	r3, r1
 800281e:	4313      	orrs	r3, r2
 8002820:	d037      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002822:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002826:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002828:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800282c:	d00e      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x760>
 800282e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002832:	d816      	bhi.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8002834:	2b00      	cmp	r3, #0
 8002836:	d018      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002838:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800283c:	d111      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800283e:	4b82      	ldr	r3, [pc, #520]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002842:	4a81      	ldr	r2, [pc, #516]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002844:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002848:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800284a:	e00f      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800284c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002850:	3308      	adds	r3, #8
 8002852:	2101      	movs	r1, #1
 8002854:	4618      	mov	r0, r3
 8002856:	f000 fe93 	bl	8003580 <RCCEx_PLL2_Config>
 800285a:	4603      	mov	r3, r0
 800285c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002860:	e004      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002868:	e000      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 800286a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800286c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10a      	bne.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002874:	4b74      	ldr	r3, [pc, #464]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002878:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800287c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002882:	4a71      	ldr	r2, [pc, #452]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002884:	430b      	orrs	r3, r1
 8002886:	6513      	str	r3, [r2, #80]	@ 0x50
 8002888:	e003      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800288a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800288e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002892:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800289e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80028a2:	2300      	movs	r3, #0
 80028a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80028a8:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4313      	orrs	r3, r2
 80028b0:	d03a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80028b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d81d      	bhi.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80028bc:	a201      	add	r2, pc, #4	@ (adr r2, 80028c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80028be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c2:	bf00      	nop
 80028c4:	08002901 	.word	0x08002901
 80028c8:	080028d5 	.word	0x080028d5
 80028cc:	080028e3 	.word	0x080028e3
 80028d0:	08002901 	.word	0x08002901
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028d4:	4b5c      	ldr	r3, [pc, #368]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80028d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d8:	4a5b      	ldr	r2, [pc, #364]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80028da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80028e0:	e00f      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80028e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028e6:	3308      	adds	r3, #8
 80028e8:	2102      	movs	r1, #2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 fe48 	bl	8003580 <RCCEx_PLL2_Config>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80028f6:	e004      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80028fe:	e000      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8002900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002902:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10a      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800290a:	4b4f      	ldr	r3, [pc, #316]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800290c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290e:	f023 0103 	bic.w	r1, r3, #3
 8002912:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002918:	4a4b      	ldr	r2, [pc, #300]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800291a:	430b      	orrs	r3, r1
 800291c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800291e:	e003      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002920:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002924:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002928:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002930:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002934:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002938:	2300      	movs	r3, #0
 800293a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800293e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002942:	460b      	mov	r3, r1
 8002944:	4313      	orrs	r3, r2
 8002946:	f000 80a0 	beq.w	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800294a:	4b40      	ldr	r3, [pc, #256]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a3f      	ldr	r2, [pc, #252]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002950:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002954:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002956:	f7fe f849 	bl	80009ec <HAL_GetTick>
 800295a:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800295e:	e00b      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002960:	f7fe f844 	bl	80009ec <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b64      	cmp	r3, #100	@ 0x64
 800296e:	d903      	bls.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002976:	e005      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002978:	4b34      	ldr	r3, [pc, #208]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0ed      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8002984:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002988:	2b00      	cmp	r3, #0
 800298a:	d17a      	bne.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800298c:	4b2e      	ldr	r3, [pc, #184]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800298e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002990:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002994:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002998:	4053      	eors	r3, r2
 800299a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d015      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029a2:	4b29      	ldr	r3, [pc, #164]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029ae:	4b26      	ldr	r3, [pc, #152]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b2:	4a25      	ldr	r2, [pc, #148]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029ba:	4b23      	ldr	r3, [pc, #140]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029be:	4a22      	ldr	r2, [pc, #136]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029c4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80029c6:	4a20      	ldr	r2, [pc, #128]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80029cc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80029ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80029d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029da:	d118      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029dc:	f7fe f806 	bl	80009ec <HAL_GetTick>
 80029e0:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029e4:	e00d      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e6:	f7fe f801 	bl	80009ec <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80029f0:	1ad2      	subs	r2, r2, r3
 80029f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d903      	bls.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8002a00:	e005      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a02:	4b11      	ldr	r3, [pc, #68]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0eb      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8002a0e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d130      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a1a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002a1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a26:	d115      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8002a28:	4b07      	ldr	r3, [pc, #28]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002a30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a34:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002a38:	091a      	lsrs	r2, r3, #4
 8002a3a:	4b05      	ldr	r3, [pc, #20]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	4a02      	ldr	r2, [pc, #8]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a40:	430b      	orrs	r3, r1
 8002a42:	6113      	str	r3, [r2, #16]
 8002a44:	e00c      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8002a46:	bf00      	nop
 8002a48:	58024400 	.word	0x58024400
 8002a4c:	58024800 	.word	0x58024800
 8002a50:	00ffffcf 	.word	0x00ffffcf
 8002a54:	4bd4      	ldr	r3, [pc, #848]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	4ad3      	ldr	r2, [pc, #844]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002a5a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002a5e:	6113      	str	r3, [r2, #16]
 8002a60:	4bd1      	ldr	r3, [pc, #836]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002a62:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002a64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a70:	4acd      	ldr	r2, [pc, #820]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002a72:	430b      	orrs	r3, r1
 8002a74:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a76:	e008      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a78:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a7c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8002a80:	e003      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a86:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002a8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a92:	f002 0301 	and.w	r3, r2, #1
 8002a96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002aa0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f000 808b 	beq.w	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002aac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ab4:	2b28      	cmp	r3, #40	@ 0x28
 8002ab6:	d86b      	bhi.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8002aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abe:	bf00      	nop
 8002ac0:	08002b99 	.word	0x08002b99
 8002ac4:	08002b91 	.word	0x08002b91
 8002ac8:	08002b91 	.word	0x08002b91
 8002acc:	08002b91 	.word	0x08002b91
 8002ad0:	08002b91 	.word	0x08002b91
 8002ad4:	08002b91 	.word	0x08002b91
 8002ad8:	08002b91 	.word	0x08002b91
 8002adc:	08002b91 	.word	0x08002b91
 8002ae0:	08002b65 	.word	0x08002b65
 8002ae4:	08002b91 	.word	0x08002b91
 8002ae8:	08002b91 	.word	0x08002b91
 8002aec:	08002b91 	.word	0x08002b91
 8002af0:	08002b91 	.word	0x08002b91
 8002af4:	08002b91 	.word	0x08002b91
 8002af8:	08002b91 	.word	0x08002b91
 8002afc:	08002b91 	.word	0x08002b91
 8002b00:	08002b7b 	.word	0x08002b7b
 8002b04:	08002b91 	.word	0x08002b91
 8002b08:	08002b91 	.word	0x08002b91
 8002b0c:	08002b91 	.word	0x08002b91
 8002b10:	08002b91 	.word	0x08002b91
 8002b14:	08002b91 	.word	0x08002b91
 8002b18:	08002b91 	.word	0x08002b91
 8002b1c:	08002b91 	.word	0x08002b91
 8002b20:	08002b99 	.word	0x08002b99
 8002b24:	08002b91 	.word	0x08002b91
 8002b28:	08002b91 	.word	0x08002b91
 8002b2c:	08002b91 	.word	0x08002b91
 8002b30:	08002b91 	.word	0x08002b91
 8002b34:	08002b91 	.word	0x08002b91
 8002b38:	08002b91 	.word	0x08002b91
 8002b3c:	08002b91 	.word	0x08002b91
 8002b40:	08002b99 	.word	0x08002b99
 8002b44:	08002b91 	.word	0x08002b91
 8002b48:	08002b91 	.word	0x08002b91
 8002b4c:	08002b91 	.word	0x08002b91
 8002b50:	08002b91 	.word	0x08002b91
 8002b54:	08002b91 	.word	0x08002b91
 8002b58:	08002b91 	.word	0x08002b91
 8002b5c:	08002b91 	.word	0x08002b91
 8002b60:	08002b99 	.word	0x08002b99
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b68:	3308      	adds	r3, #8
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 fd07 	bl	8003580 <RCCEx_PLL2_Config>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002b78:	e00f      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b7e:	3328      	adds	r3, #40	@ 0x28
 8002b80:	2101      	movs	r1, #1
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fdae 	bl	80036e4 <RCCEx_PLL3_Config>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002b8e:	e004      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002b96:	e000      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8002b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b9a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10b      	bne.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002ba2:	4b81      	ldr	r3, [pc, #516]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002baa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bb2:	4a7d      	ldr	r2, [pc, #500]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002bb4:	430b      	orrs	r3, r1
 8002bb6:	6553      	str	r3, [r2, #84]	@ 0x54
 8002bb8:	e003      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002bbe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002bc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bca:	f002 0302 	and.w	r3, r2, #2
 8002bce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002bd8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4313      	orrs	r3, r2
 8002be0:	d042      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002be2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002be6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002be8:	2b05      	cmp	r3, #5
 8002bea:	d825      	bhi.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8002bec:	a201      	add	r2, pc, #4	@ (adr r2, 8002bf4 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8002bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf2:	bf00      	nop
 8002bf4:	08002c41 	.word	0x08002c41
 8002bf8:	08002c0d 	.word	0x08002c0d
 8002bfc:	08002c23 	.word	0x08002c23
 8002c00:	08002c41 	.word	0x08002c41
 8002c04:	08002c41 	.word	0x08002c41
 8002c08:	08002c41 	.word	0x08002c41
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c10:	3308      	adds	r3, #8
 8002c12:	2101      	movs	r1, #1
 8002c14:	4618      	mov	r0, r3
 8002c16:	f000 fcb3 	bl	8003580 <RCCEx_PLL2_Config>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002c20:	e00f      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c26:	3328      	adds	r3, #40	@ 0x28
 8002c28:	2101      	movs	r1, #1
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 fd5a 	bl	80036e4 <RCCEx_PLL3_Config>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002c36:	e004      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002c3e:	e000      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8002c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c42:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10a      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002c4a:	4b57      	ldr	r3, [pc, #348]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c4e:	f023 0107 	bic.w	r1, r3, #7
 8002c52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c58:	4a53      	ldr	r2, [pc, #332]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002c5a:	430b      	orrs	r3, r1
 8002c5c:	6553      	str	r3, [r2, #84]	@ 0x54
 8002c5e:	e003      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c60:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c64:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c70:	f002 0304 	and.w	r3, r2, #4
 8002c74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c7e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4313      	orrs	r3, r2
 8002c86:	d044      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002c88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c90:	2b05      	cmp	r3, #5
 8002c92:	d825      	bhi.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8002c94:	a201      	add	r2, pc, #4	@ (adr r2, 8002c9c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8002c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9a:	bf00      	nop
 8002c9c:	08002ce9 	.word	0x08002ce9
 8002ca0:	08002cb5 	.word	0x08002cb5
 8002ca4:	08002ccb 	.word	0x08002ccb
 8002ca8:	08002ce9 	.word	0x08002ce9
 8002cac:	08002ce9 	.word	0x08002ce9
 8002cb0:	08002ce9 	.word	0x08002ce9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cb8:	3308      	adds	r3, #8
 8002cba:	2101      	movs	r1, #1
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 fc5f 	bl	8003580 <RCCEx_PLL2_Config>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002cc8:	e00f      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002cca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cce:	3328      	adds	r3, #40	@ 0x28
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 fd06 	bl	80036e4 <RCCEx_PLL3_Config>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002cde:	e004      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002ce6:	e000      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8002ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10b      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cf2:	4b2d      	ldr	r3, [pc, #180]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf6:	f023 0107 	bic.w	r1, r3, #7
 8002cfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d02:	4a29      	ldr	r2, [pc, #164]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002d04:	430b      	orrs	r3, r1
 8002d06:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d08:	e003      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d0a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d0e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1a:	f002 0320 	and.w	r3, r2, #32
 8002d1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d22:	2300      	movs	r3, #0
 8002d24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	d057      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002d32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d3e:	d035      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8002d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d44:	d82c      	bhi.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d4a:	d031      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8002d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d50:	d826      	bhi.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002d52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002d56:	d02d      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8002d58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002d5c:	d820      	bhi.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002d5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d62:	d012      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8002d64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d68:	d81a      	bhi.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d024      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8002d6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d72:	d115      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d78:	3308      	adds	r3, #8
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 fbff 	bl	8003580 <RCCEx_PLL2_Config>
 8002d82:	4603      	mov	r3, r0
 8002d84:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002d88:	e017      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d8e:	3328      	adds	r3, #40	@ 0x28
 8002d90:	2102      	movs	r1, #2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fca6 	bl	80036e4 <RCCEx_PLL3_Config>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002d9e:	e00c      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002da6:	e008      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8002da8:	58024400 	.word	0x58024400
        break;
 8002dac:	bf00      	nop
 8002dae:	e004      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8002db0:	bf00      	nop
 8002db2:	e002      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8002db4:	bf00      	nop
 8002db6:	e000      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8002db8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10b      	bne.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dc2:	4bc2      	ldr	r3, [pc, #776]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002dca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dd2:	4abe      	ldr	r2, [pc, #760]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	6553      	str	r3, [r2, #84]	@ 0x54
 8002dd8:	e003      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dda:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002dde:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002de2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dea:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002dee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002df2:	2300      	movs	r3, #0
 8002df4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002df8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	d055      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002e02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002e0a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002e0e:	d033      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8002e10:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002e14:	d82c      	bhi.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8002e16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e1a:	d02f      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8002e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e20:	d826      	bhi.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8002e22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e26:	d02b      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8002e28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e2c:	d820      	bhi.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8002e2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e32:	d012      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8002e34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e38:	d81a      	bhi.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d022      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8002e3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e42:	d115      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e48:	3308      	adds	r3, #8
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fb97 	bl	8003580 <RCCEx_PLL2_Config>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002e58:	e015      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002e5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e5e:	3328      	adds	r3, #40	@ 0x28
 8002e60:	2102      	movs	r1, #2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fc3e 	bl	80036e4 <RCCEx_PLL3_Config>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002e6e:	e00a      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002e76:	e006      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8002e78:	bf00      	nop
 8002e7a:	e004      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8002e7c:	bf00      	nop
 8002e7e:	e002      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8002e80:	bf00      	nop
 8002e82:	e000      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8002e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e86:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10b      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e8e:	4b8f      	ldr	r3, [pc, #572]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e92:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8002e96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002e9e:	4a8b      	ldr	r2, [pc, #556]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ea4:	e003      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002eaa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002eae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb6:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002eba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ec4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	d055      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002ece:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ed2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002ed6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002eda:	d033      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8002edc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002ee0:	d82c      	bhi.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8002ee2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ee6:	d02f      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8002ee8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002eec:	d826      	bhi.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8002eee:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002ef2:	d02b      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8002ef4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002ef8:	d820      	bhi.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8002efa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002efe:	d012      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8002f00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f04:	d81a      	bhi.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d022      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8002f0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f0e:	d115      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f14:	3308      	adds	r3, #8
 8002f16:	2100      	movs	r1, #0
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 fb31 	bl	8003580 <RCCEx_PLL2_Config>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002f24:	e015      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f2a:	3328      	adds	r3, #40	@ 0x28
 8002f2c:	2102      	movs	r1, #2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fbd8 	bl	80036e4 <RCCEx_PLL3_Config>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002f3a:	e00a      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002f42:	e006      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8002f44:	bf00      	nop
 8002f46:	e004      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8002f48:	bf00      	nop
 8002f4a:	e002      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8002f4c:	bf00      	nop
 8002f4e:	e000      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8002f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f52:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10b      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002f5a:	4b5c      	ldr	r3, [pc, #368]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5e:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8002f62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002f6a:	4a58      	ldr	r2, [pc, #352]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002f6c:	430b      	orrs	r3, r1
 8002f6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f70:	e003      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f76:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002f7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f82:	f002 0308 	and.w	r3, r2, #8
 8002f86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002f90:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002f94:	460b      	mov	r3, r1
 8002f96:	4313      	orrs	r3, r2
 8002f98:	d01e      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8002f9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fa6:	d10c      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002fa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fac:	3328      	adds	r3, #40	@ 0x28
 8002fae:	2102      	movs	r1, #2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 fb97 	bl	80036e4 <RCCEx_PLL3_Config>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002fc2:	4b42      	ldr	r3, [pc, #264]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002fca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd2:	4a3e      	ldr	r2, [pc, #248]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002fd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe0:	f002 0310 	and.w	r3, r2, #16
 8002fe4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002fee:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	d01e      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8002ff8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ffc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003000:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003004:	d10c      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003006:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800300a:	3328      	adds	r3, #40	@ 0x28
 800300c:	2102      	movs	r1, #2
 800300e:	4618      	mov	r0, r3
 8003010:	f000 fb68 	bl	80036e4 <RCCEx_PLL3_Config>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003020:	4b2a      	ldr	r3, [pc, #168]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003024:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003028:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800302c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003030:	4a26      	ldr	r2, [pc, #152]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003032:	430b      	orrs	r3, r1
 8003034:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003036:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800303a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003042:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003046:	2300      	movs	r3, #0
 8003048:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800304c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003050:	460b      	mov	r3, r1
 8003052:	4313      	orrs	r3, r2
 8003054:	d040      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003056:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800305a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800305e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003062:	d022      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8003064:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003068:	d81b      	bhi.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800306e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003072:	d00b      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8003074:	e015      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003076:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800307a:	3308      	adds	r3, #8
 800307c:	2100      	movs	r1, #0
 800307e:	4618      	mov	r0, r3
 8003080:	f000 fa7e 	bl	8003580 <RCCEx_PLL2_Config>
 8003084:	4603      	mov	r3, r0
 8003086:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800308a:	e00f      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800308c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003090:	3328      	adds	r3, #40	@ 0x28
 8003092:	2102      	movs	r1, #2
 8003094:	4618      	mov	r0, r3
 8003096:	f000 fb25 	bl	80036e4 <RCCEx_PLL3_Config>
 800309a:	4603      	mov	r3, r0
 800309c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80030a0:	e004      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80030a8:	e000      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80030aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10d      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030b4:	4b05      	ldr	r3, [pc, #20]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80030bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80030c4:	4a01      	ldr	r2, [pc, #4]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030c6:	430b      	orrs	r3, r1
 80030c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80030ca:	e005      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80030cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80030d4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e0:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80030e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80030e6:	2300      	movs	r3, #0
 80030e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80030ea:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80030ee:	460b      	mov	r3, r1
 80030f0:	4313      	orrs	r3, r2
 80030f2:	d03b      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80030f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003100:	d01f      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8003102:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003106:	d818      	bhi.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8003108:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800310c:	d003      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800310e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003112:	d007      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8003114:	e011      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003116:	4b64      	ldr	r3, [pc, #400]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311a:	4a63      	ldr	r2, [pc, #396]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800311c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003120:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003122:	e00f      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003124:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003128:	3328      	adds	r3, #40	@ 0x28
 800312a:	2101      	movs	r1, #1
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fad9 	bl	80036e4 <RCCEx_PLL3_Config>
 8003132:	4603      	mov	r3, r0
 8003134:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003138:	e004      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003140:	e000      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8003142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003144:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10b      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800314c:	4b56      	ldr	r3, [pc, #344]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800314e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003150:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003154:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003158:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800315c:	4a52      	ldr	r2, [pc, #328]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800315e:	430b      	orrs	r3, r1
 8003160:	6553      	str	r3, [r2, #84]	@ 0x54
 8003162:	e003      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003164:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003168:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800316c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003174:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003178:	673b      	str	r3, [r7, #112]	@ 0x70
 800317a:	2300      	movs	r3, #0
 800317c:	677b      	str	r3, [r7, #116]	@ 0x74
 800317e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003182:	460b      	mov	r3, r1
 8003184:	4313      	orrs	r3, r2
 8003186:	d031      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003188:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800318c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8003192:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003196:	d007      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003198:	e011      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800319a:	4b43      	ldr	r3, [pc, #268]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800319c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319e:	4a42      	ldr	r2, [pc, #264]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80031a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80031a6:	e00e      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80031a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031ac:	3308      	adds	r3, #8
 80031ae:	2102      	movs	r1, #2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 f9e5 	bl	8003580 <RCCEx_PLL2_Config>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80031bc:	e003      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80031c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10a      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80031ce:	4b36      	ldr	r3, [pc, #216]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80031d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80031d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031dc:	4a32      	ldr	r2, [pc, #200]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80031de:	430b      	orrs	r3, r1
 80031e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031e2:	e003      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031e8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80031f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031fa:	2300      	movs	r3, #0
 80031fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80031fe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003202:	460b      	mov	r3, r1
 8003204:	4313      	orrs	r3, r2
 8003206:	d00c      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003208:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800320c:	3328      	adds	r3, #40	@ 0x28
 800320e:	2102      	movs	r1, #2
 8003210:	4618      	mov	r0, r3
 8003212:	f000 fa67 	bl	80036e4 <RCCEx_PLL3_Config>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003222:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800322e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003230:	2300      	movs	r3, #0
 8003232:	667b      	str	r3, [r7, #100]	@ 0x64
 8003234:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003238:	460b      	mov	r3, r1
 800323a:	4313      	orrs	r3, r2
 800323c:	d03a      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800323e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003242:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003246:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800324a:	d018      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x1192>
 800324c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003250:	d811      	bhi.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003252:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003256:	d014      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800325c:	d80b      	bhi.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800325e:	2b00      	cmp	r3, #0
 8003260:	d011      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8003262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003266:	d106      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003268:	4b0f      	ldr	r3, [pc, #60]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800326a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326c:	4a0e      	ldr	r2, [pc, #56]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800326e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003272:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003274:	e008      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800327c:	e004      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800327e:	bf00      	nop
 8003280:	e002      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003282:	bf00      	nop
 8003284:	e000      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003286:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003288:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10d      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003290:	4b05      	ldr	r3, [pc, #20]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003294:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003298:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800329c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032a0:	4a01      	ldr	r2, [pc, #4]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80032a2:	430b      	orrs	r3, r1
 80032a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80032a6:	e005      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80032a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80032b0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032bc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80032c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80032c2:	2300      	movs	r3, #0
 80032c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80032ca:	460b      	mov	r3, r1
 80032cc:	4313      	orrs	r3, r2
 80032ce:	d009      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032d0:	4baa      	ldr	r3, [pc, #680]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80032d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80032d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032de:	4aa7      	ldr	r2, [pc, #668]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80032e0:	430b      	orrs	r3, r1
 80032e2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80032e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80032f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80032f2:	2300      	movs	r3, #0
 80032f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80032f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80032fa:	460b      	mov	r3, r1
 80032fc:	4313      	orrs	r3, r2
 80032fe:	d00a      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003300:	4b9e      	ldr	r3, [pc, #632]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003308:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800330c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003310:	4a9a      	ldr	r2, [pc, #616]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003312:	430b      	orrs	r3, r1
 8003314:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003316:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003322:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003324:	2300      	movs	r3, #0
 8003326:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003328:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800332c:	460b      	mov	r3, r1
 800332e:	4313      	orrs	r3, r2
 8003330:	d009      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003332:	4b92      	ldr	r3, [pc, #584]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003334:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003336:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800333a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800333e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003340:	4a8e      	ldr	r2, [pc, #568]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003342:	430b      	orrs	r3, r1
 8003344:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003346:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800334a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003352:	643b      	str	r3, [r7, #64]	@ 0x40
 8003354:	2300      	movs	r3, #0
 8003356:	647b      	str	r3, [r7, #68]	@ 0x44
 8003358:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800335c:	460b      	mov	r3, r1
 800335e:	4313      	orrs	r3, r2
 8003360:	d00e      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003362:	4b86      	ldr	r3, [pc, #536]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	4a85      	ldr	r2, [pc, #532]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003368:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800336c:	6113      	str	r3, [r2, #16]
 800336e:	4b83      	ldr	r3, [pc, #524]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003370:	6919      	ldr	r1, [r3, #16]
 8003372:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003376:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800337a:	4a80      	ldr	r2, [pc, #512]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800337c:	430b      	orrs	r3, r1
 800337e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003380:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003388:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800338c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800338e:	2300      	movs	r3, #0
 8003390:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003392:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003396:	460b      	mov	r3, r1
 8003398:	4313      	orrs	r3, r2
 800339a:	d009      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800339c:	4b77      	ldr	r3, [pc, #476]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800339e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033a0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80033a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033aa:	4a74      	ldr	r2, [pc, #464]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80033ac:	430b      	orrs	r3, r1
 80033ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80033bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80033be:	2300      	movs	r3, #0
 80033c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80033c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80033c6:	460b      	mov	r3, r1
 80033c8:	4313      	orrs	r3, r2
 80033ca:	d00a      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033cc:	4b6b      	ldr	r3, [pc, #428]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80033ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80033d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033dc:	4a67      	ldr	r2, [pc, #412]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80033de:	430b      	orrs	r3, r1
 80033e0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80033e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ea:	2100      	movs	r1, #0
 80033ec:	62b9      	str	r1, [r7, #40]	@ 0x28
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033f4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80033f8:	460b      	mov	r3, r1
 80033fa:	4313      	orrs	r3, r2
 80033fc:	d011      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003402:	3308      	adds	r3, #8
 8003404:	2100      	movs	r1, #0
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f8ba 	bl	8003580 <RCCEx_PLL2_Config>
 800340c:	4603      	mov	r3, r0
 800340e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003412:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800341e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003422:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342a:	2100      	movs	r1, #0
 800342c:	6239      	str	r1, [r7, #32]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	627b      	str	r3, [r7, #36]	@ 0x24
 8003434:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003438:	460b      	mov	r3, r1
 800343a:	4313      	orrs	r3, r2
 800343c:	d011      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800343e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003442:	3308      	adds	r3, #8
 8003444:	2101      	movs	r1, #1
 8003446:	4618      	mov	r0, r3
 8003448:	f000 f89a 	bl	8003580 <RCCEx_PLL2_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003452:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800345a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800345e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003462:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346a:	2100      	movs	r1, #0
 800346c:	61b9      	str	r1, [r7, #24]
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	61fb      	str	r3, [r7, #28]
 8003474:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003478:	460b      	mov	r3, r1
 800347a:	4313      	orrs	r3, r2
 800347c:	d011      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800347e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003482:	3308      	adds	r3, #8
 8003484:	2102      	movs	r1, #2
 8003486:	4618      	mov	r0, r3
 8003488:	f000 f87a 	bl	8003580 <RCCEx_PLL2_Config>
 800348c:	4603      	mov	r3, r0
 800348e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003492:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800349a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800349e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80034a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034aa:	2100      	movs	r1, #0
 80034ac:	6139      	str	r1, [r7, #16]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80034b8:	460b      	mov	r3, r1
 80034ba:	4313      	orrs	r3, r2
 80034bc:	d011      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034c2:	3328      	adds	r3, #40	@ 0x28
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 f90c 	bl	80036e4 <RCCEx_PLL3_Config>
 80034cc:	4603      	mov	r3, r0
 80034ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80034d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80034de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80034e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ea:	2100      	movs	r1, #0
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	f003 0310 	and.w	r3, r3, #16
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80034f8:	460b      	mov	r3, r1
 80034fa:	4313      	orrs	r3, r2
 80034fc:	d011      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003502:	3328      	adds	r3, #40	@ 0x28
 8003504:	2101      	movs	r1, #1
 8003506:	4618      	mov	r0, r3
 8003508:	f000 f8ec 	bl	80036e4 <RCCEx_PLL3_Config>
 800350c:	4603      	mov	r3, r0
 800350e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003512:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800351e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003522:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352a:	2100      	movs	r1, #0
 800352c:	6039      	str	r1, [r7, #0]
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	607b      	str	r3, [r7, #4]
 8003534:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003538:	460b      	mov	r3, r1
 800353a:	4313      	orrs	r3, r2
 800353c:	d011      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800353e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003542:	3328      	adds	r3, #40	@ 0x28
 8003544:	2102      	movs	r1, #2
 8003546:	4618      	mov	r0, r3
 8003548:	f000 f8cc 	bl	80036e4 <RCCEx_PLL3_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003552:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800355e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8003562:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	e000      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
}
 8003570:	4618      	mov	r0, r3
 8003572:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003576:	46bd      	mov	sp, r7
 8003578:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800357c:	58024400 	.word	0x58024400

08003580 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800358e:	4b53      	ldr	r3, [pc, #332]	@ (80036dc <RCCEx_PLL2_Config+0x15c>)
 8003590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	2b03      	cmp	r3, #3
 8003598:	d101      	bne.n	800359e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e099      	b.n	80036d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800359e:	4b4f      	ldr	r3, [pc, #316]	@ (80036dc <RCCEx_PLL2_Config+0x15c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a4e      	ldr	r2, [pc, #312]	@ (80036dc <RCCEx_PLL2_Config+0x15c>)
 80035a4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80035a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035aa:	f7fd fa1f 	bl	80009ec <HAL_GetTick>
 80035ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80035b0:	e008      	b.n	80035c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80035b2:	f7fd fa1b 	bl	80009ec <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e086      	b.n	80036d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80035c4:	4b45      	ldr	r3, [pc, #276]	@ (80036dc <RCCEx_PLL2_Config+0x15c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1f0      	bne.n	80035b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80035d0:	4b42      	ldr	r3, [pc, #264]	@ (80036dc <RCCEx_PLL2_Config+0x15c>)
 80035d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	031b      	lsls	r3, r3, #12
 80035de:	493f      	ldr	r1, [pc, #252]	@ (80036dc <RCCEx_PLL2_Config+0x15c>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	025b      	lsls	r3, r3, #9
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	3b01      	subs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	3b01      	subs	r3, #1
 800360e:	061b      	lsls	r3, r3, #24
 8003610:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003614:	4931      	ldr	r1, [pc, #196]	@ (80036dc <RCCEx_PLL2_Config+0x15c>)
 8003616:	4313      	orrs	r3, r2
 8003618:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800361a:	4b30      	ldr	r3, [pc, #192]	@ (80036dc <RCCEx_PLL2_Config+0x15c>)
 800361c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	492d      	ldr	r1, [pc, #180]	@ (80036dc <RCCEx_PLL2_Config+0x15c>)
 8003628:	4313      	orrs	r3, r2
 800362a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800362c:	4b2b      	ldr	r3, [pc, #172]	@ (80036dc <RCCEx_PLL2_Config+0x15c>)
 800362e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003630:	f023 0220 	bic.w	r2, r3, #32
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	4928      	ldr	r1, [pc, #160]	@ (80036dc <RCCEx_PLL2_Config+0x15c>)
 800363a:	4313      	orrs	r3, r2
 800363c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800363e:	4b27      	ldr	r3, [pc, #156]	@ (80036dc <RCCEx_PLL2_Config+0x15c>)
 8003640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003642:	4a26      	ldr	r2, [pc, #152]	@ (80036dc <RCCEx_PLL2_Config+0x15c>)
 8003644:	f023 0310 	bic.w	r3, r3, #16
 8003648:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800364a:	4b24      	ldr	r3, [pc, #144]	@ (80036dc <RCCEx_PLL2_Config+0x15c>)
 800364c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800364e:	4b24      	ldr	r3, [pc, #144]	@ (80036e0 <RCCEx_PLL2_Config+0x160>)
 8003650:	4013      	ands	r3, r2
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	69d2      	ldr	r2, [r2, #28]
 8003656:	00d2      	lsls	r2, r2, #3
 8003658:	4920      	ldr	r1, [pc, #128]	@ (80036dc <RCCEx_PLL2_Config+0x15c>)
 800365a:	4313      	orrs	r3, r2
 800365c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800365e:	4b1f      	ldr	r3, [pc, #124]	@ (80036dc <RCCEx_PLL2_Config+0x15c>)
 8003660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003662:	4a1e      	ldr	r2, [pc, #120]	@ (80036dc <RCCEx_PLL2_Config+0x15c>)
 8003664:	f043 0310 	orr.w	r3, r3, #16
 8003668:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d106      	bne.n	800367e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003670:	4b1a      	ldr	r3, [pc, #104]	@ (80036dc <RCCEx_PLL2_Config+0x15c>)
 8003672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003674:	4a19      	ldr	r2, [pc, #100]	@ (80036dc <RCCEx_PLL2_Config+0x15c>)
 8003676:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800367a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800367c:	e00f      	b.n	800369e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d106      	bne.n	8003692 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003684:	4b15      	ldr	r3, [pc, #84]	@ (80036dc <RCCEx_PLL2_Config+0x15c>)
 8003686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003688:	4a14      	ldr	r2, [pc, #80]	@ (80036dc <RCCEx_PLL2_Config+0x15c>)
 800368a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800368e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003690:	e005      	b.n	800369e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003692:	4b12      	ldr	r3, [pc, #72]	@ (80036dc <RCCEx_PLL2_Config+0x15c>)
 8003694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003696:	4a11      	ldr	r2, [pc, #68]	@ (80036dc <RCCEx_PLL2_Config+0x15c>)
 8003698:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800369c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800369e:	4b0f      	ldr	r3, [pc, #60]	@ (80036dc <RCCEx_PLL2_Config+0x15c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a0e      	ldr	r2, [pc, #56]	@ (80036dc <RCCEx_PLL2_Config+0x15c>)
 80036a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036aa:	f7fd f99f 	bl	80009ec <HAL_GetTick>
 80036ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80036b0:	e008      	b.n	80036c4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80036b2:	f7fd f99b 	bl	80009ec <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e006      	b.n	80036d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80036c4:	4b05      	ldr	r3, [pc, #20]	@ (80036dc <RCCEx_PLL2_Config+0x15c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	58024400 	.word	0x58024400
 80036e0:	ffff0007 	.word	0xffff0007

080036e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80036f2:	4b53      	ldr	r3, [pc, #332]	@ (8003840 <RCCEx_PLL3_Config+0x15c>)
 80036f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d101      	bne.n	8003702 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e099      	b.n	8003836 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003702:	4b4f      	ldr	r3, [pc, #316]	@ (8003840 <RCCEx_PLL3_Config+0x15c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a4e      	ldr	r2, [pc, #312]	@ (8003840 <RCCEx_PLL3_Config+0x15c>)
 8003708:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800370c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800370e:	f7fd f96d 	bl	80009ec <HAL_GetTick>
 8003712:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003714:	e008      	b.n	8003728 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003716:	f7fd f969 	bl	80009ec <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e086      	b.n	8003836 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003728:	4b45      	ldr	r3, [pc, #276]	@ (8003840 <RCCEx_PLL3_Config+0x15c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1f0      	bne.n	8003716 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003734:	4b42      	ldr	r3, [pc, #264]	@ (8003840 <RCCEx_PLL3_Config+0x15c>)
 8003736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003738:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	051b      	lsls	r3, r3, #20
 8003742:	493f      	ldr	r1, [pc, #252]	@ (8003840 <RCCEx_PLL3_Config+0x15c>)
 8003744:	4313      	orrs	r3, r2
 8003746:	628b      	str	r3, [r1, #40]	@ 0x28
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	3b01      	subs	r3, #1
 800374e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	3b01      	subs	r3, #1
 8003758:	025b      	lsls	r3, r3, #9
 800375a:	b29b      	uxth	r3, r3
 800375c:	431a      	orrs	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	3b01      	subs	r3, #1
 8003764:	041b      	lsls	r3, r3, #16
 8003766:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	3b01      	subs	r3, #1
 8003772:	061b      	lsls	r3, r3, #24
 8003774:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003778:	4931      	ldr	r1, [pc, #196]	@ (8003840 <RCCEx_PLL3_Config+0x15c>)
 800377a:	4313      	orrs	r3, r2
 800377c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800377e:	4b30      	ldr	r3, [pc, #192]	@ (8003840 <RCCEx_PLL3_Config+0x15c>)
 8003780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003782:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	492d      	ldr	r1, [pc, #180]	@ (8003840 <RCCEx_PLL3_Config+0x15c>)
 800378c:	4313      	orrs	r3, r2
 800378e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003790:	4b2b      	ldr	r3, [pc, #172]	@ (8003840 <RCCEx_PLL3_Config+0x15c>)
 8003792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003794:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	4928      	ldr	r1, [pc, #160]	@ (8003840 <RCCEx_PLL3_Config+0x15c>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80037a2:	4b27      	ldr	r3, [pc, #156]	@ (8003840 <RCCEx_PLL3_Config+0x15c>)
 80037a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a6:	4a26      	ldr	r2, [pc, #152]	@ (8003840 <RCCEx_PLL3_Config+0x15c>)
 80037a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80037ae:	4b24      	ldr	r3, [pc, #144]	@ (8003840 <RCCEx_PLL3_Config+0x15c>)
 80037b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037b2:	4b24      	ldr	r3, [pc, #144]	@ (8003844 <RCCEx_PLL3_Config+0x160>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	69d2      	ldr	r2, [r2, #28]
 80037ba:	00d2      	lsls	r2, r2, #3
 80037bc:	4920      	ldr	r1, [pc, #128]	@ (8003840 <RCCEx_PLL3_Config+0x15c>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80037c2:	4b1f      	ldr	r3, [pc, #124]	@ (8003840 <RCCEx_PLL3_Config+0x15c>)
 80037c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003840 <RCCEx_PLL3_Config+0x15c>)
 80037c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d106      	bne.n	80037e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80037d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003840 <RCCEx_PLL3_Config+0x15c>)
 80037d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d8:	4a19      	ldr	r2, [pc, #100]	@ (8003840 <RCCEx_PLL3_Config+0x15c>)
 80037da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80037de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80037e0:	e00f      	b.n	8003802 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d106      	bne.n	80037f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80037e8:	4b15      	ldr	r3, [pc, #84]	@ (8003840 <RCCEx_PLL3_Config+0x15c>)
 80037ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ec:	4a14      	ldr	r2, [pc, #80]	@ (8003840 <RCCEx_PLL3_Config+0x15c>)
 80037ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80037f4:	e005      	b.n	8003802 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80037f6:	4b12      	ldr	r3, [pc, #72]	@ (8003840 <RCCEx_PLL3_Config+0x15c>)
 80037f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fa:	4a11      	ldr	r2, [pc, #68]	@ (8003840 <RCCEx_PLL3_Config+0x15c>)
 80037fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003800:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003802:	4b0f      	ldr	r3, [pc, #60]	@ (8003840 <RCCEx_PLL3_Config+0x15c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a0e      	ldr	r2, [pc, #56]	@ (8003840 <RCCEx_PLL3_Config+0x15c>)
 8003808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800380c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800380e:	f7fd f8ed 	bl	80009ec <HAL_GetTick>
 8003812:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003814:	e008      	b.n	8003828 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003816:	f7fd f8e9 	bl	80009ec <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e006      	b.n	8003836 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003828:	4b05      	ldr	r3, [pc, #20]	@ (8003840 <RCCEx_PLL3_Config+0x15c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0f0      	beq.n	8003816 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003834:	7bfb      	ldrb	r3, [r7, #15]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	58024400 	.word	0x58024400
 8003844:	ffff0007 	.word	0xffff0007

08003848 <memset>:
 8003848:	4402      	add	r2, r0
 800384a:	4603      	mov	r3, r0
 800384c:	4293      	cmp	r3, r2
 800384e:	d100      	bne.n	8003852 <memset+0xa>
 8003850:	4770      	bx	lr
 8003852:	f803 1b01 	strb.w	r1, [r3], #1
 8003856:	e7f9      	b.n	800384c <memset+0x4>

08003858 <__libc_init_array>:
 8003858:	b570      	push	{r4, r5, r6, lr}
 800385a:	4d0d      	ldr	r5, [pc, #52]	@ (8003890 <__libc_init_array+0x38>)
 800385c:	4c0d      	ldr	r4, [pc, #52]	@ (8003894 <__libc_init_array+0x3c>)
 800385e:	1b64      	subs	r4, r4, r5
 8003860:	10a4      	asrs	r4, r4, #2
 8003862:	2600      	movs	r6, #0
 8003864:	42a6      	cmp	r6, r4
 8003866:	d109      	bne.n	800387c <__libc_init_array+0x24>
 8003868:	4d0b      	ldr	r5, [pc, #44]	@ (8003898 <__libc_init_array+0x40>)
 800386a:	4c0c      	ldr	r4, [pc, #48]	@ (800389c <__libc_init_array+0x44>)
 800386c:	f000 f818 	bl	80038a0 <_init>
 8003870:	1b64      	subs	r4, r4, r5
 8003872:	10a4      	asrs	r4, r4, #2
 8003874:	2600      	movs	r6, #0
 8003876:	42a6      	cmp	r6, r4
 8003878:	d105      	bne.n	8003886 <__libc_init_array+0x2e>
 800387a:	bd70      	pop	{r4, r5, r6, pc}
 800387c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003880:	4798      	blx	r3
 8003882:	3601      	adds	r6, #1
 8003884:	e7ee      	b.n	8003864 <__libc_init_array+0xc>
 8003886:	f855 3b04 	ldr.w	r3, [r5], #4
 800388a:	4798      	blx	r3
 800388c:	3601      	adds	r6, #1
 800388e:	e7f2      	b.n	8003876 <__libc_init_array+0x1e>
 8003890:	080038d8 	.word	0x080038d8
 8003894:	080038d8 	.word	0x080038d8
 8003898:	080038d8 	.word	0x080038d8
 800389c:	080038dc 	.word	0x080038dc

080038a0 <_init>:
 80038a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a2:	bf00      	nop
 80038a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038a6:	bc08      	pop	{r3}
 80038a8:	469e      	mov	lr, r3
 80038aa:	4770      	bx	lr

080038ac <_fini>:
 80038ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ae:	bf00      	nop
 80038b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038b2:	bc08      	pop	{r3}
 80038b4:	469e      	mov	lr, r3
 80038b6:	4770      	bx	lr
